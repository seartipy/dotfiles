#! /usr/bin/env bash

# utils

BOLD=$(tput bold)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
RESET=$(tput sgr0)
# WHITE=$(tput setaf 7)

slog() {
    echo "
${BOLD}${GREEN}SEARTIPY: ${RESET} $1
" | tee -a ~/seartipy-installer.log
}

warn() {
    echo "
${BOLD}${YELLOW}WARNING: ${RESET} $1
" | tee -a ~/seartipy-installer.log
}

err_exit() {
    echo "
${BOLD}${RED}FATAL: ${RESET} $1
" | tee -a ~/seartipy-installer.log

    exit 1
}

is_debian() {
    has_cmd lsb_release || return 1
    local OS
    OS=$(lsb_release -i | cut -d ':' -f2)
    [[ "$OS" == *"Debian" ]]
}

is_ubuntu() {
    has_cmd lsb_release || return 1
    local OS
    OS=$(lsb_release -i | cut -d ':' -f2)
    [[ "$OS" == *"Ubuntu" ]] || [[ "$OS" == *"neon" ]] || [[ "$OS" == *"elementary" ]] || [[ "$OS" == *"LinuxMint" ]]
}

is_zesty() {
    local OS
    OS=$(lsb_release -c | cut -d ':' -f2)
    [[ "$OS" == *"zesty" ]]
}

is_apt() {
    is_ubuntu || is_debian
}

is_fedora() {
    [ -f /etc/redhat-release ]
}

is_linux() {
    [ "$OSTYPE" == "linux-gnu" ]
}

is_mac() {
    [[ "$OSTYPE" == "darwin"* ]]
}

has_cmd() {
    command -v "$1" > /dev/null
}

smv() {
    if mv "$1" "$2" 2> /dev/null; then
        slog "Moved $1 to $2"
    fi
}

smd() {
    [ -d "$1" ] && return 1
    slog "Creating directory $1"
    mkdir -p "$1" 2> /dev/null
}


srm() {
    for f in "$@"; do
        if [ -L "$f" ]; then
            rm -f "$f"
        elif is_apt; then
            trash-put "$f" 2> /dev/null && slog "Trashed $f"
        else
            trash "$f" 2> /dev/null && slog "Trashed $f"
        fi
    done
}

sln() {
    if ! [ -e "$1" ]; then
        warn "$1 does not exist, cannot create the link $2"
        return 1
    elif [ -L "$2" ]; then
        srm "$2"
    elif [ -e "$2" ]; then
        warn "$2 exists and not a symbolic link! not creating link"
        return 1
    fi
    slog "Creating link $2 to $1"
    ln -s "$1" "$2"
}

sclone() {
    local dest=${*: -1}
    local src=${*: -2:1}

    if [ -d "$dest" ]; then
        if cd "$dest"; then
            slog "Pulling $dest"
            if has_cmd git-up; then
                git-up
            else
                git pull --ff-only
            fi
            cd
        fi
    else
        slog "Cloning $src to $dest"
        git clone "$@"
    fi
}

fclone() {
    local dest=${*: -1}
    local src=${*: -2:1}

    srm "$dest"
    slog "Cloning $src to $dest"
    git clone "$@"
}

scopy() {
    if [ -e "$2" ] || [ -L "$2" ]; then
        return 0
    else
        slog "Copying $1 to $2"
        cp "$1" "$2"
    fi
}

pre_cmd_check() {
    for cmd in "$@"; do
        has_cmd "$cmd" || err_exit "$cmd not installed, quitting"
    done
}

pre_dir_check() {
    for dir in "$@"; do
        [ -d "$dir" ] || err_exit "$dir does not exist, quitting"
    done
}

cmd_check() {
    for cmd in "$@"; do
        has_cmd "$cmd" || warn "$cmd not installed"
    done
}

dir_exists() {
    [[ -d "$1" ]]
}

dir_check() {
    for dir in "$@"; do
        dir_exists "$dir" || warn "$dir does not exist"
    done
}

ln_to_exists() {
    local rl=readlink
    is_mac && rl=greadlink
    [[ "$1" == $($rl -f "$2") ]]
}

ln_check() {
    ln_to_exists "$1" "$2" || warn "$2 not a link to $1"
}

file_check() {
    for f in "$@"; do
        [ -f "$f" ] || warn "$f does not exist"
    done
}

ppa_exists() {
    ls /etc/apt/sources.list.d | grep "$1" > /dev/null
}

ppa_check() {
    ppa_exists "$1" || warn "$1 ppa not added"
}

apm_exists() {
    apm ls --installed --bare | cut -d "@" -f 1 | grep "^$1$" > /dev/null
}

apm_check() {
    for p in "$@"; do
        apm_exists "$p" || warn "$p atom package not installed"
    done
}

npm_exists() {
    npm list --global --depth=0 "$1" 2> /dev/null | grep "$1" > /dev/null
}

npm_check() {
    for p in "$@"; do
        npm_exists "$p" || warn "$p npm package not installed"
    done
}

gem_exists() {
    gem list --local | grep "$1" > /dev/null
}

gem_check() {
    for p in "$@"; do
        gem_exists "$p" || warn "$p gem not installed"
    done
}

brew_exists() {
    brew list | grep "^$1$" > /dev/null
}

brew_check() {
    for p in "$@"; do
        brew_exists "$p" || warn "$p brew cask package not installed"
    done
}

brew_cask_exists() {
    brew cask list | grep "$1" > /dev/null
}

brew_cask_check() {
    for p in "$@"; do
        brew_cask_exists "$p" || warn "$p brew cask package not installed"
    done
}

apmi() {
    has_cmd apm || return 1

    for p in "$@"; do
        if ! apm_exists "$p"; then
            slog "Installing apm package $p"
            apm install "$p"
        fi
    done
}

sysi() {
    for p in "$@"; do
        if is_mac; then
            brew install "$p"
        elif is_apt; then
            sudo apt install -y "$p"
        elif is_fedora; then
            sudo dnf install -y "$p"
        fi
    done
}

stackexei() {
    has_cmd stack || return 1

    for p in "$@"; do
        stack install "$p"
    done
}

npmi() {
    has_cmd npm || return 1

    for p in "$@"; do
        if ! npm_exists "$p"; then
            slog "Installing npm package $p"
            npm install -g "$p"
        fi
    done
}

gemi() {
    has_cmd gem || return 1

    for p in "$@"; do
        if ! gem_exists "$p"; then
            slog "Installing gem package $p"
            gem install "$p" --no-ri --no-rdoc
        fi
    done
}

#
# PPAs

add_java_ppa() {
    is_apt || return 1
    ppa_exists 'webupd8team.*java' && return 0

    slog "Adding java ppa"
    echo "oracle-java8-installer shared/accepted-oracle-license-v1-1 select true" | sudo debconf-set-selections
    sudo add-apt-repository ppa:webupd8team/java -y
}

add_scala_ppa() {
    is_apt || return 1
    ppa_exists sbt && return 0

    slog "Adding scala ppa"
    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 642AC823
    echo "deb http://dl.bintray.com/sbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list
}

add_chrome_ppa() {
    is_apt || return 1
    ppa_exists google-chrome && return 0

    slog "Adding google chrome ppa"
    wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
    sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
}

add_webupd8_ppa() {
    is_ubuntu || return 1
    ppa_exists nilarimogard && return 0

    slog "Adding webupd8 ppa for youtub-dl etc"
    sudo add-apt-repository ppa:nilarimogard/webupd8 -y
}

add_atom_ppa() {
    is_apt || return 1
    ppa_exists 'webupd8team.*-atom' && return 0
    slog "Adding atom ppa"
    sudo add-apt-repository ppa:webupd8team/atom -y
}

add_vscode_ppa() {
    is_ubuntu || return 1
    ppa_exists 'vscode' && return 0

    sudo wget -O - https://tagplus5.github.io/vscode-ppa/ubuntu/gpg.key | sudo apt-key add -
    sudo wget -O /etc/apt/sources.list.d/vscode.list https://tagplus5.github.io/vscode-ppa/ubuntu/vscode.list
}

add_r_ppa() {
    is_ubuntu || return 1
    ppa_exists rutter && return 0

    slog "Adding r ppa"
    sudo add-apt-repository ppa:marutter/rrutter -y
}

add_typora_ppa() {
    is_apt || return 1

    ppa_exists typora.io && return 0

    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE
    sudo add-apt-repository 'deb https://typora.io ./linux/' -y
}

add_umake_ppa() {
    is_ubuntu || return 1
    ppa_exists ubuntu-make && return 0

    sudo sudo add-apt-repository ppa:ubuntu-desktop/ubuntu-make -y
}

add_docker_ppa() {
    is_ubuntu || return 1
    ppa_exists docker && return 0

    sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
    echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main" | sudo tee /etc/apt/sources.list.d/docker.list
}

#
# essential

ubuntu_update() {
    is_apt || return 1

    slog "Updating ubuntu"
    if ! sudo apt-get update; then
        err_exit "apt-get update failed, quitting"
    fi
}

ubuntu_upgrade() {
    is_apt || return 1

    slog "Upgrading packages"
    if ! sudo apt-get upgrade -y; then
        err_exit "apt-get upgrade failed, quitting"
    fi
}

essential_ubuntu_install() {
    is_apt || return 1
    pre_cmd_check apt-get
    sudo apt-get install -y software-properties-common
    pre_cmd_check debconf-set-selections add-apt-repository apt-key wget

    add_chrome_ppa
    is_zesty || add_umake_ppa

    ubuntu_update
    ubuntu_upgrade

    slog "Installing essential packages"
    sudo apt-get install -y curl wget git trash-cli tree xsel xclip silversearcher-ag p7zip dconf-cli build-essential google-chrome-stable tmux exfat-fuse exfat-utils "linux-headers-$(uname -r)" zeal stow myrepos unar unzip libzmq3-dev pkg-config fonts-hack-otf zip
    is_ubuntu && sudo apt-get install -y firefox
    sudo apt-get install -y ubuntu-make
    is_debian && sudo apt-get install -y firefox-esr
}

essential_mac_install() {
    is_mac || return 1

    if ! has_cmd brew; then
        pre_cmd_check ruby

        slog "Installing homebrew"
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi

    pre_cmd_check brew

    slog "Installing brew cask"
    brew tap caskroom/cask

    slog "Upgrading brew packages"
    brew update && brew upgrade

    brew install wget trash tree fasd unar p7zip gpg the_silver_searcher coreutils tmux gpg stow myrepos zeromq pkg-config
    brew cask install iterm2 google-chrome
}

essential_fedora_install() {
    is_fedora || return 1

    pre_cmd_check dnf

    slog "Add rpmfusion free and non free packages"
    sudo dnf install -y http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm

    slog "Installing essential packages"
    sudo dnf install -y curl wget git trash-cli tree xsel xclip the_silver_searcher unar p7zip dconf tmux util-linux-user stow myrepos gcc-c++ zeromq zeromq-devel readline-devel zip
}

fasd_install() {
    is_linux || return 1
    has_cmd fasd && return 0

    slog "Installing fasd"
    if fclone https://github.com/clvv/fasd.git /tmp/seartipy-installer-fasd; then
        cd /tmp/seartipy-installer-fasd && PREFIX=$HOME make install
	cd
        rm -rf /tmp/seartipy-installer-fasd
    fi
}

essential_install() {
    essential_ubuntu_install
    essential_fedora_install
    essential_mac_install

    fasd_install
}

#
# cleanup

cleanup_ubuntu() {
    is_apt || return 1
    sudo apt-get clean
    sudo apt-get autoclean
    sudo apt-get autoremove -y
}

cleanup_mac() {
    is_mac || return 1

    slog "cleanup brew"
    brew cleanup
    brew cask cleanup
}
cleanup_fedora() {
    is_fedora || return 1

    slog "dnf cleanup"
    sudo dnf clean all
}

cleanup() {
    cleanup_ubuntu
    cleanup_fedora
    cleanup_mac
}

#
# dotfiles

clone_mean_dotfiles() {
    sclone https://gitlab.com/seartipy/mean-dotfiles.git ~/seartipy/mean-dotfiles
    [ -d ~/seartipy/mean-dotfiles ] || return 1
}

clone_lean_dotfiles() {
    sclone https://gitlab.com/seartipy/lean-dotfiles.git ~/seartipy/lean-dotfiles
    [ -d ~/seartipy/lean-dotfiles ] || return 1

    [ -n "$SEARTIPY" ] && cd ~/seartipy/lean-dotfiles && git checkout develop && cd || return 1
}

clone_dotfiles() {
    sclone https://gitlab.com/seartipy/dotfiles.git ~/seartipy/dotfiles
    [ -d ~/seartipy/dotfiles ] || return 1

    pre_dir_check ~/seartipy/dotfiles

    [ -n "$SEARTIPY" ] && cd ~/seartipy/dotfiles && git checkout develop && cd || return 1
}

tmux_dotfiles() {
    [ -f ~/seartipy/dotfiles/tmux.conf ] || return 1

    slog "Moving ~/.tmux.conf to $BACKUP_DIR"
    smv ~/.tmux.conf "$BACKUP_DIR"

    slog "Linking ~/seartipy/dotfiles/tmux.conf to ~/.tmux.conf"
    sln ~/seartipy/dotfiles/tmux.conf ~/.tmux.conf
}

dotfiles_install() {
    clone_mean_dotfiles
    clone_lean_dotfiles
    clone_dotfiles

    tmux_dotfiles
}

#
# bash

mac_bash_dotfiles() {
    is_mac || return 1
    [ -f ~/seartipy/dotfiles/bashrc ] || return 1

    slog "Moving ~/.bash_profile, ~/.bashrc to $BACKUP_DIR"
    smv ~/.bash_profile $BACKUP_DIR
    smv ~/.bashrc "$BACKUP_DIR"

    sln ~/seartipy/dotfiles/bashrc ~/.bash_profile
    sln ~/seartipy/dotfiles/bashrc ~/.bashrc
}

linux_bash_dotfiles() {
    is_linux || return 1
    [ -f ~/seartipy/dotfiles/bashrc ] || return 1

    slog "Moving ~/.bash_profile to $BACKUP_DIR"
    smv ~/.bash_profile "$BACKUP_DIR"
    sln ~/seartipy/dotfiles/bashrc ~/.bash_profile

    if ! grep .bash_profile ~/.bashrc > /dev/null; then
        echo "[ -f ~/.bash_profile ] && source ~/.bash_profile" >> ~/.bashrc
    fi
}

bash_install() {
    mac_bash_dotfiles
    linux_bash_dotfiles

    sclone https://github.com/nojhan/liquidprompt.git ~/seartipy/vendors/liquidprompt
}

#
# zsh

zsh_fedora_install() {
    is_fedora || return 1

    slog "Installing zsh"
    sudo dnf install -y zsh ShellCheck
}

zsh_ubuntu_install() {
    is_apt || return 1

    slog "Installing zsh"
    sudo apt-get install -y zsh shellcheck
}

zsh_mac_install() {
    is_mac || return 1

    slog "Installing zsh"
    brew install shellcheck
}

zsh_dotfiles() {
    [ -f ~/seartipy/dotfiles/zgen-zshrc ] || return 1

    slog "Moving ~/.zshrc to $BACKUP_DIR "
    smv ~/.zshrc "$BACKUP_DIR"

    slog "Linking ~/seartipy/dotfiles/zgen-zshrc as ~/.zshrc"
    sln ~/seartipy/dotfiles/zgen-zshrc ~/.zshrc

    slog "Copying ~/seartipy/dotfiles/templates/zgen-options-local.sh to ~/.zgen-options-local.sh"
    scopy ~/seartipy/dotfiles/templates/zgen-options-local.sh ~/.zgen-options-local.sh

    slog "Copying ~/seartipy/dotfiles/templates/zgen-pre-local.sh to ~/.zgen-pre-local.sh"
    scopy ~/seartipy/dotfiles/templates/zshrc-pre-local.sh ~/.zshrc-pre-local.sh
}

zsh_install() {
    zsh_fedora_install
    zsh_ubuntu_install
    zsh_mac_install

    zsh_dotfiles

    sclone https://github.com/changs/slimzsh.git ~/.slimzsh
    sclone https://github.com/zsh-users/antigen.git ~/seartipy/vendors/antigen
    sclone https://github.com/tarjoilija/zgen.git ~/.zgen
}

#
# emacs

# drop emacs-mac, normal emacs works better with emacsclient
emacs_mac_install() {
    is_mac || return 1

    slog "Installing emacs packages"
    brew tap d12frosted/emacs-plus
    brew install emacs-plus

    brew install editorconfig cask
    # TODO : ctags
    brew install aspell --with-lang-en

    slog "Trashing /Applications/Emacs.app(if exists)"
    srm '/Applications/Emacs.app'

    slog "Creating Emacs alias in /Applications"
    # make emacs available from spotlight
    osascript -e 'tell application "Finder" to make alias file to POSIX file "/usr/local/opt/emacs-plus/Emacs.app" at POSIX file "/Applications"'

    slog "Generating terminfo for terminal in emacs"
    local emacsversion=`ls -r /usr/local/Cellar/emacs-plus | head -1`
    tic -o ~/.terminfo /usr/local/Cellar/emacs-plus/${emacsversion}/share/emacs/${emacsversion}/etc/e/eterm-color.ti
}

emacs_fedora_install() {
    is_fedora || return 1

    slog "Installing emacs"
    sudo dnf install -y emacs aspell aspell-en ctags-etags
}

emacs_ubuntu_install() {
    is_apt || return 1

    slog "Installing emacs"
    sudo apt-get install -y emacs24 aspell aspell-en editorconfig exuberant-ctags

}

spacemacs_dotfiles() {
    sclone https://github.com/syl20bnr/spacemacs ~/seartipy/emacses/spacemacs

    [ -f ~/seartipy/dotfiles/templates/spacemacs ] || return 1

    slog "Copying ~/seartipy/dotfiles/templates/spacemacs as ~/.spacemacs"
    scopy ~/seartipy/dotfiles/templates/spacemacs ~/.spacemacs
}

leanemacs_dotfiles() {
    [ -f ~/seartipy/lean-dotfiles/emacs-init.el ] || return 1

    smd ~/seartipy/emacses/lean-emacs

    slog "Linking ~/seartipy/lean-dotfiles/emacs-init.el as ~/seartipy/emacses/lean-emacs/init.el"
    sln ~/seartipy/lean-dotfiles/emacs-init.el ~/seartipy/emacses/lean-emacs/init.el
}

housemd_dotfiles() {
    sclone  https://gitlab.com/seartipy/housemd.git ~/seartipy/emacses/housemd

    [ -d "$HOME/seartipy/emacses/housemd" ] || return 1

    [ -n "$SEARTIPY" ] && cd ~/seartipy/emacses/housemd && git checkout develop
    cd

    slog "Moving ~/.emacs.d to $BACKUP_DIR (if they exist) "
    smv ~/.emacs.d $BACKUP_DIR

    slog "Linking ~/seartipy/emacses/housemd as ~/.emacs.d"
    sln ~/seartipy/emacses/housemd ~/.emacs.d

    slog "Copying ~/seartipy/emacses/housemd/templates/emacs-pre-local.el to ~/.emacs-pre-local.el"
    scopy ~/seartipy/emacses/housemd/templates/emacs-pre-local.el ~/.emacs-pre-local.el
}

emacs_dotfiles() {
    spacemacs_dotfiles
    leanemacs_dotfiles
    housemd_dotfiles
}

emacs_cask_install() {
    is_linux || return 1

    export PATH="$HOME/.cask/bin:$PATH"
    has_cmd cask || curl -fsSL https://raw.githubusercontent.com/cask/cask/master/go | python
}

emacs_install() {
    emacs_mac_install
    emacs_fedora_install
    emacs_ubuntu_install

    emacs_dotfiles

    emacs_cask_install

    cd ~/seartipy/emacses/housemd || return 1

    if has_cmd cask; then
        cask install && cask update
    else
        warn "cask command absent, skipping emacs install"
    fi

    cd
}

#
# atom

ubuntu_atom_install() {
    is_apt || return 1
    add_atom_ppa
    ubuntu_update
    sudo apt-get install -y atom
}

fedora_atom_install() {
    is_fedora || return 1
    sudo dnf -y copr enable mosquito/atom
    sudo dnf install -y atom
}

mac_atom_install() {
    is_mac || return 1
    brew cask install atom
}

atom_install() {
    ubuntu_atom_install
    mac_atom_install
    fedora_atom_install

    apmi proton-mode

    slog "Linking ~/seartipy/dotfiles/atom-proton to ~/.proton"
    sln ~/seartipy/dotfiles/atom-proton ~/.proton
}

#
# vscode

ubuntu_vscode_install() {
    is_ubuntu || return 1
    add_vscode_ppa
    ubuntu_update
    sudo apt-get install -y code code-insiders
}

mac_vscode_install() {
    is_mac || return 1
    brew cask install visual-studio-code
}

vscode_install() {
    ubuntu_vscode_install
    mac_vscode_install

    code --install-extension EditorConfig.EditorConfig
    code --install-extension msjsdiag.debugger-for-chrome
    code --install-extension eg2.tslint
    code --install-extension dbaeumer.vscode-eslint
    code --install-extension alefragnani.project-manager
    code --install-extension robertohuertasm.vscode-icons
    code --install-extension Orta.vscode-jest
    code --install-extension flowtype.flow-for-vscode
    code --install-extension ms-vscode.cpptools
    code --install-extension jakethashi.vscode-angular2-emmet
    code --install-extension natewallace.angular2-inline
    code --install-extension formulahendry.auto-rename-tag
    code --install-extension Angular.ng-template
    code --install-extension lucax88x.codeacejumper
    code --install-extension dracula-theme.theme-dracula
    code --install-extension wmaurer.vscode-jumpy
    code --install-extension ms-vscode.Theme-TomorrowKit
    code --install-extension esbenp.prettier-vscode
    code --install-extension redhat.java
}

#
# git

git_mac_install() {
    is_mac || return 1

    slog "Installing git packages"
    brew cask install smartgit github-desktop
    brew install git-extras
    brew cask install kdiff3
}

git_fedora_install() {
    is_fedora || return 1

    slog "Installing git"
    sudo dnf install -y kdiff3 git-extras meld
}

git_ubuntu_install() {
    is_apt || return 1

    slog "Installing git"
    sudo apt-get install -y kdiff3 git-extras meld
}

git_install() {
    git_mac_install
    git_fedora_install
    git_ubuntu_install

    scopy ~/seartipy/dotfiles/templates/gitconfig ~/.gitconfig
}

#
# java

jdk_mac_install() {
    is_mac || return 1

    slog "Installing java"
    brew cask install java
}

jdk_fedora_install() {
    is_fedora || return 1

    slog "Installing java"
    sudo dnf install -y java-1.8.0-openjdk java-1.8.0-openjdk-devel java-1.8.0-openjdk-src
}

jdk_ubuntu_install() {
    is_apt || return 1
    add_java_ppa
    ubuntu_update

    slog "Installing Java"
    sudo apt-get install -y oracle-java8-installer oracle-java8-set-default
}

jdk_install() {
    has_cmd javac && javac -version 2>&1 | grep "1.8" > /dev/null && return 0

    jdk_mac_install
    jdk_fedora_install
    jdk_ubuntu_install
}

sdkman_install() {
    has_cmd sdk && return 0
    curl -s "https://get.sdkman.io" | bash
}


java_install() {
    jdk_install
    sdkman_install
    source "$HOME/.sdkman/bin/sdkman-init.sh"
    has_cmd maven || sdk install maven < /dev/null
    has_cmd gradle || sdk install gradle < /dev/null
    has_cmd groovy || sdk install groovy < /dev/null
}

#
# clojure

linux_lein_install() {
    is_linux || return 1
    has_cmd lein && return 1

    slog "Installing leiningen"
    curl -L https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein > ~/bin/lein
    chmod +x ~/bin/lein
}

linux_boot_install() {
    is_linux || return 1
    if ! has_cmd boot; then
        if cd ~/bin; then
            curl -fsSLo boot https://github.com/boot-clj/boot-bin/releases/download/latest/boot.sh
            chmod 755 boot
        fi
        chmod a+x ~/bin/boot
    fi
    boot -u
}

clojure_mac_install() {
    is_mac || return 1

    slog "Installing clojure packages"
    brew install leiningen boot-clj
}

boot_dotfiles() {
    [ -f ~/seartipy/dotfiles/boot-profile.boot ] || return 1

    slog "Moving ~/.boot/profile.boot to $BACKUP_DIR (if exists)"
    smv ~/.boot/profile.boot $BACKUP_DIR

    smd ~/.boot

    slog "Linking ~/seartipy/dotfiles/boot-profile.boot as ~/.boot/profile.boot"
    sln ~/seartipy/dotfiles/boot-profile.boot ~/.boot/profile.boot
}

lein_dotfiles() {
    [ -f ~/seartipy/dotfiles/lein-profiles.clj ] || return 1

    slog "Moving ~/.lein/profiles.clj to $BACKUP_DIR (if exists)"
    smv ~/.lein/profiles.clj $BACKUP_DIR

    smd ~/.lein

    slog "Linking ~/seartipy/dotfiles/lein-profiles.clj as ~/.lein/profiles.clj"
    sln ~/seartipy/dotfiles/lein-profiles.clj ~/.lein/profiles.clj
}

clojure_dotfiles() {
    lein_dotfiles
    boot_dotfiles
}

clojure_install() {
    jdk_install

    clojure_mac_install
    linux_lein_install
    linux_boot_install

    clojure_dotfiles
}

#
# scala

scala_mac_install() {
    is_mac || return 1

    slog "Installing scala packages"
    brew install sbt scala ammonite-repl
    brew cask install scala-ide
}

ammonite_install() {
    is_linux || return 1
    has_cmd amm && return 0

     curl -L https://git.io/v0FGO > ~/bin/amm && chmod +x ~/bin/amm
}

scala_fedora_install() {
    is_fedora || return 1

    slog "Installing scala"
    curl https://bintray.com/sbt/rpm/rpm | sudo tee /etc/yum.repos.d/bintray-sbt-rpm.repo
    sudo dnf install -y scala sbt
}

scala_ubuntu_install() {
    is_apt || return 1

    add_scala_ppa
    ubuntu_update

    slog "Install scala"
    sudo apt-get -y install sbt scala
}

sbt_plugins() {
    [ -f ~/seartipy/dotfiles/sbt-plugins.sbt ] || return 1

    slog "Moving ~/.sbt/0.13/plugins/plugins.sbt to $BACKUP_DIR (if exists)"
    smv ~/.sbt/0.13/plugins/plugins.sbt $BACKUP_DIR

    smd ~/.sbt/0.13/plugins

    slog "Linking ~/seartipy/dotfiles/sbt-plugins.sbt as ~/.sbt/0.13/plugins/plugins.sbt"
    sln ~/seartipy/dotfiles/sbt-plugins.sbt ~/.sbt/0.13/plugins/plugins.sbt
}

sbt_global() {
    [ -f ~/seartipy/dotfiles/sbt-global.sbt ] || return 1

    slog "Moving ~/.sbt/0.13/global.sbt to $BACKUP_DIR (if exists)"
    smv ~/.sbt/0.13/global.sbt $BACKUP_DIR

    smd ~/.sbt/0.13/

    slog "Linking ~/seartipy/dotfiles/sbt-global.sbt as ~/.sbt/0.13/global.sbt"
    sln ~/seartipy/dotfiles/sbt-global.sbt ~/.sbt/0.13/global.sbt
}

scala_dotfiles() {
    sbt_plugins
    sbt_global
}

scala_install() {
    jdk_install

    scala_mac_install
    scala_fedora_install
    scala_ubuntu_install

    ammonite_install

    scala_dotfiles
}

#
# haskell

cabal_mac_install() {
    is_mac || return 1

    slog "Installing cabal"
    brew install ghc cabal-install
}

cabal_fedora_install() {
    is_fedora || return 1

    slog "Installing cabal"
    sudo dnf install -y ghc cabal-install
}

cabal_ubuntu_install() {
    is_apt || return 1

    add_haskell_stack_ppa
    ubuntu_update

    slog "Installing cabal"
    sudo apt-get install -y cabal-install ghc
}

cabal_install() {
    cabal_mac_install
    cabal_fedora_install
    cabal_ubuntu_install
}


ihaskell_install() {
    has_cmd stack || return 1

    stackexei  alex happy cpphs
    stackexei ihaskell

    # has_cmd ihaskell || return 1
    # ihaskell install
}

haskell_install() {
    slog "Installing haskell..."

    cabal_install

    slog "Installing stack"
    curl -sSL https://get.haskellstack.org/ | sh

    slog "Installing stack packages"
    stack setup
    stackexei alex
    stackexei happy
    stackexei hlint
    # stack install structured-haskell-mode
    stackexei  stylish-haskell
    stackexei hasktags
    stackexei hindent
    stackexei hdevtools
    stackexei install ghc-mod
    # stackexei ghci-ng
    stackexei apply-refact
    stackexei hoogle
    stackexei intero
    ihaskell_install
}

#
# purescript

purescript_mac_install() {
    is_mac || return 1

    slog "Installing purescript"
    brew cask install purescript
}

purescript_linux_install() {
    is_linux || return 1

    nvm_install

    slog "Installing purescript"
    npmi  purescript
}

purescript_install() {
    purescript_mac_install
    purescript_linux_install
}

#
# idris

idris_mac_install() {
    is_mac || return 1

    brew cask install idris
}

idris_linux_install() {
    is_linux || return 1

    stackexei idris
}

idris_install() {
    idris_mac_install
    idris_linux_install
}

#
# elm

elm_mac_install() {
    is_mac || return 1
    brew cask install elm-platform

    web_mac_install
}

elm_linux_install() {
    is_linux || return 1

    nvm_install

    slog "Installing elm"
    npmi elm
}

elm_install() {
    elm_mac_install
    elm_linux_install

    npmi elm-oracle elm-live
}

#
# python

pipi() {
    if is_mac; then
        pip3 install "$@"
    elif is_linux; then
        pip3 install --user "$@"
    fi
}

mac_python3_install() {
    is_mac || return 1

    brew install python3
    pip3 install --upgrade pip setuptools wheel
    pip3 install matplotlib
}

apt_python3_install() {
    is_apt || return 1

    sudo apt-get install -y python3-pip python3-dev python3-matplotlib python3-setuptools python3-wheel python3-tk
    pip3 install --upgrade --user pip
}

fedora_python3_install() {
    is_fedora || return 1

    sudo dnf install -y python3-pip python3-devel python3-matplotlib python3-setuptools python3-wheel python3-tkinter
    pip3 install --upgrade --user pip
}

python3_install() {
    mac_python3_install
    apt_python3_install
    fedora_python3_install

    pipi yapf service-factory jedi flake8 isort jupyter numpy scipy pep8 pandas bokeh git-up pyqt5 pytest pytest-watch ptpython autoflake
    is_linux && export PATH="$HOME/.local/bin:$PATH"
}

python_mac_install() {
    is_mac || return 1

    slog "Installing python packages"
    brew install pyenv pyenv-virtualenv
}

python_linux_install() {
    is_linux || return 1

    sclone  https://github.com/yyuu/pyenv.git ~/.pyenv
    sclone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
}

python_install() {
    python_mac_install
    python_linux_install

    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"

    has_cmd pyenv || return 1

    if ! pyenv versions | grep anaconda > /dev/null; then
        slog "Installing anaconda"
        local anacondaversion=`pyenv install --list | grep anaconda | tail -1`
        pyenv install $anacondaversion
    fi
}

#
# web

nvm_install() {
    [ -s ~/.nvm/nvm.sh ] && source ~/.nvm/nvm.sh

    slog "Installing nvm"
    if ! has_cmd nvm; then
        curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash
        source ~/.nvm/nvm.sh
    fi
    has_cmd nvm || return 1

    nvm install node
    nvm alias default node
}

web_install() {
    nvm_install

    slog "Installing npm packages for web development"
    npmi typescript flow-bin yarn
    npmi eslint tslint jsonlint
    npmi eslint-config-react eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react eslint-plugin-flowtype babel-eslint
    npmi create-react-app @angular/cli feathers-cli express-generator
    npmi tern js-beautify ijavascript
    npmi npm-check npm-check-updates lite-server
}

#
# vim

vim_mac_install() {
    is_mac || return 1

    slog "Installing vim packages"
    brew install macvim --override-system-vim --with-lua --with-luajit
    brew linkapps macvim
}

vim_fedora_install() {
    is_fedora || return 1

    slog "Installing vim"
    sudo dnf install -y vim-enhanced
}

vim_ubuntu_install() {
    is_apt || return 1

    slog "Installing vim"
    sudo apt-get install -y vim-gnome
}

vim_install() {
    vim_mac_install
    vim_fedora_install
    vim_ubuntu_install

    slog "Installing vim packages"
    curl -L https://bit.ly/janus-bootstrap | bash
}

#
# additional

docker_ubuntu_install() {
    is_ubuntu || return 1
    has_cmd docker && return 1

    add_docker_ppa
    ubuntu_update

    sudo apt-get install -y apt-transport-https ca-certificates
    sudo apt-get install -y "linux-image-extra-$(uname -r)" linux-image-extra-virtual
    sudo apt-get install -y docker-engine

    sudo systemctl enable docker
    sudo usermod -aG docker "$USER"
}

icdiff_mac_install() {
    is_mac || return 1
    brew install icdiff
}

icdiff_linux_install() {
    is_linux || return 1

    has_cmd icdiff || curl -L https://raw.githubusercontent.com/jeffkaufman/icdiff/release-1.8.1/icdiff > ~/bin/icdiff && chmod +x ~/bin/icdiff

    has_cmd git-icdiff || curl -L https://raw.githubusercontent.com/jeffkaufman/icdiff/release-1.8.1/git-icdiff > ~/bin/git-icdiff && chmod +x ~/bin/git-icdiff
}

icdiff_install() {
    icdiff_mac_install
    icdiff_linux_install
}

additional_mac_install() {
    is_mac || return 1

    slog "Installing additional packages"
    brew cask install google-chrome dash android-file-transfer transmission macdown vlc karabiner seil spectacle skype gitup discord alfred typora
    brew install jq httpie icdiff
    brew cask install betterzipql qlcolorcode qlimagesize qlmarkdown qlprettypatch qlstephen quicklook-csv quicklook-json webpquicklook xquartz suspicious-package
    brew install youtube-dl
    if ! has_cmd vmware-user-suid-wrapper; then
        brew cask install virtualbox virtualbox-extension-pack
    fi
}

additional_fedora_install() {
    is_fedora || return 1

    slog "Installing additional packages"
    sudo dnf install -y jq httpie
    has_cmd vmware-user-suid-wrapper || sudo dnf install -y VirtualBox dkms vlc youtube-dl
}


typora_install() {
    is_apt || return 1

    add_typora_ppa
    sudo apt-get update

    sudo apt-get install typora
}

additional_ubuntu_install() {
    is_apt || return 1

    add_webupd8_ppa
    ubuntu_update

    slog "Installing additional"

    sudo apt-get install -y jq httpie

    if ! has_cmd vmware-user-suid-wrapper; then
        sudo apt-get install -y virtualbox vlc
        sudo apt-get install -y youtube-dl
        docker_ubuntu_install
    fi

    typora_install
}

additional_install() {
    additional_mac_install
    additional_fedora_install
    additional_ubuntu_install

    icdiff_install
}

#
# c++

cpp_ubuntu_install() {
    is_apt || return 1

    slog "Installing C++"
    sudo apt-get install -y clang libclang-dev libc++-dev libc++abi-dev libboost-all-dev g++ cppcheck scons cmake bear clang-format clang-tidy ninja-build lldb
}

cpp_fedora_install() {
    is_fedora || return 1

    slog "Installing C++"
    sudo dnf install -y clang clang-devel clang-analyzer clang-libs boost boost-build cppcheck scons cmake ninja-build lldb
}

cpp_mac_install() {
    is_mac || return 1

    slog "Installing c++ packages"
    brew install boost --c++11
    brew install cmake scons boost-build cppcheck clang-format ninja bear
}

cpp_install() {
    cpp_mac_install
    cpp_fedora_install
    cpp_ubuntu_install
}

#
# elixir

elixir_fedora_install() {
    is_fedora || return 1

    slog "Installing elixir"
    sudo dnf install -y elixir
}

elixir_ubuntu_install() {
    is_apt || return 1

    add_r_ppa
    ubuntu_update

    slog "Installing elixir"
    sudo apt-get install -y elixir
}

elixir_mac_install() {
    is_mac || return 1

    slog "Installing elixir"
    brew install elixir
}

elixir_install() {
    elixir_fedora_install
    elixir_ubuntu_install
    elixir_mac_install
}

#
# golang

golang_mac_install() {
    is_mac || return 1

    brew install golang
}

golang_ubuntu_install() {
    is_apt || return 1

    sudo apt-get install -y golang
}

golang_fedora_install() {
    is_fedora || return 1

    sudo dnf install -y golang
}

golang_install() {
    golang_mac_install
    golang_ubuntu_install
    golang_fedora_install

    smd ~/golang-ws
    has_cmd go || return 1

    export GOPATH="$HOME/golang-ws"
    go get -u github.com/golang/lint/golint
    go get -u github.com/nsf/gocode
    go get -u github.com/rogpeppe/godef
    go get -u golang.org/x/tools/cmd/benchcmp
    go get -u golang.org/x/tools/go/ssa/interp
    sudo GOPATH="$HOME/golang-ws" go get -u golang.org/x/tools/cmd/godoc
    go get -u golang.org/x/tools/cmd/...

    go get -u github.com/cortesi/devd/cmd/devd # livereload proxy server
}

#
# rust

rust_linux_install() {
    is_linux || return 1
    has_cmd rustc && return 1

    curl -sSf https://static.rust-lang.org/rustup.sh | sh -s -- -y
}

rust_mac_install() {
    is_mac || return 1

    brew install rust
}

rust_install() {
    rust_linux_install
    rust_mac_install
}

#
# r

r_ubuntu_install() {
    is_apt || return 1

    sudo apt-get install -y r-base r-base-dev # currently using rutter ppa, use cran instead?
}

r_mac_install() {
    is_mac || return 1

    brew tap homebrew/science
    brew install R
    brew cask install rstudio
}

r_fedora_install() {
    is_fedora || return 1

    sudo dnf install -y R
}

r_install() {
    r_ubuntu_install
    r_mac_install
    r_fedora_install
}

#
# ruby

ruby_install() {
    if ! has_cmd rvm || ! rvm list rubies | grep "=* ruby"; then
        slog "Installing rvm"
        gpg2 --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
        curl -sSL https://get.rvm.io | bash -s stable --ruby
    fi

    source ~/.rvm/scripts/rvm
    slog "Installing ruby gems"
    if is_mac; then
        gem_exists eventmachine || gem install eventmachine -- --with-cppflags=-I/usr/local/opt/openssl/include
    fi
    gemi pry sinatra thin guard watchr tmuxinator sass overcommit

    is_mac && gemi xcpretty
}

#
# swift

swift_mac_install() {
    is_mac || return 1

    curl -fsSL https://raw.github.com/alcatraz/Alcatraz/master/Scripts/install.sh | sh # xcode plugin manager

    brew install swiftlint tailor cocoapods carthage
}

swift_install() {
    swift_mac_install
}

#
# installer

select_everything() {
    ESSENTIAL="essential"

    ZSH="zsh"
    BASH="bash"

    EMACS="emacs"
    ATOM="atom"
    VSCODE="vscode"

    GIT="git"
    DOTFILES="dotfiles"

    JAVA="java"
    SCALA="scala"
    CLOJURE="clojure"

    WEB="web"
    CPP="cpp"
    GO="go"

    PYTHON="python"
    PYTHON3="python3"
    HASKELL="haskell"

    RUBY="ruby"
    ELIXIR="elixir"
    PURESCRIPT="purescript"
    IDRIS="idris"
    ELM="elm"
    SWIFT="swift"

    ADDITIONAL="additional"

    VIM="vim"
    RUST="rust"
    R="r"
}

select_defaults() {
    ESSENTIAL="essential"
    ZSH="zsh"
    BASH="bash"
    EMACS="emacs"
    DOTFILES="dotfiles"
    GIT="git"
}

script_options() {
    if [ $# -eq 0 ]; then
        select_everything
    else
        select_defaults
    fi

    if [ "$USER" == "pervez" ] || [ "$USER" == "tabrez" ] || [ "$USER" == "wasay" ]; then
        SEARTIPY="seartipy"
    fi

    while [[ $# -gt 0 ]]; do
        case $1 in
            essential)
                ESSENTIAL="essential"
                shift
                ;;
            zsh)
                ZSH="zsh"
                shift
                ;;
            bash)
                BASH="bash"
                shift
                ;;
            emacs)
                EMACS="emacs"
                shift
                ;;
            dotfiles)
                DOTFILES="dotfiles"
                shift
                ;;
            git)
                GIT="git"
                shift
                ;;
            atom)
                ATOM="atom"
                shift
                ;;
            vscode)
                VSCODE="vscode"
                shift
                ;;
            go)
                GO="go"
                shift
                ;;
            java)
                JAVA="java"
                shift
                ;;
            clojure)
                CLOJURE="clojure"
                shift
                ;;
            scala)
                SCALA="scala"
                shift
                ;;
            web)
                WEB="web"
                shift
                ;;
            nothing)
                ESSENTIAL=""
                ZSH=""
                BASH=""
                EMACS=""
                GIT=""
                shift
                ;;
            nodefaults)
                ZSH=""
                BASH=""
                EMACS=""
                DOTFILES=""
                GIT=""
                shift
                ;;
            noessential)
                ESSENTIAL=""
                shift
                ;;
            nozsh)
                ZSH=""
                shift
                ;;
            noemacs)
                EMACS=""
                shift
                ;;
            nobash)
                BASH=""
                shift
                ;;
            nodotfiles)
                DOTFILES=""
                shift
                ;;
            noseartipy)
                SEARTIPY=""
                shift
                ;;
            nogit)
                GIT=""
                shift
                ;;
            nopython3)
                PYTHON3=""
                shift
                ;;
            diagnostics)
                DIAGNOSTICS="diagnostics"
                shift
                ;;
            haskell)
                HASKELL="haskell"
                shift
                ;;
            ruby)
                RUBY="ruby"
                shift
                ;;
            swift)
                SWIFT="swift"
                shift
                ;;
            cpp)
                CPP="cpp"
                shift
                ;;
            python)
                PYTHON="python"
                PYTHON3="python3"
                shift
                ;;
            elixir)
                ELIXIR="elixir"
                shift
                ;;
            additional)
                ADDITIONAL="additional"
                shift
                ;;
            seartipy)
                SEARTIPY="seartipy"
                shift
                ;;
            vim)
                VIM="vim"
                shift
                ;;
            idris)
                IDRIS="idris"
                shift
                ;;
            rust)
                RUST="rust"
                shift
                ;;
            purescript)
                PURESCRIPT="purescript"
                shift
                ;;
            elm)
                ELM="elm"
                shift
                ;;
            r)
                R="r"
                shift
                ;;
            fresh)
                FRESH="fresh"
                shift
                ;;
            elixir)
                ELIXIR="elixir"
                shift
                ;;
            everything)
                select_everything
                shift
                ;;
            *)
                shift # ignore unknown option
                ;;
        esac
    done
}

keep_sudo_running() {
    # Ask for the administrator password upfront
    sudo -v

    # Keep-alive: update existing `sudo` time stamp until `.osx` has finished
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
}

setup_backup_dir() {
    BACKUP_DIR=~/seartipy.backups

    if [ -d "$BACKUP_DIR" ]; then
        slog "moving $BACKUP_DIR to trash"
        srm $BACKUP_DIR
    fi

    smd $BACKUP_DIR

    if ! [ -d "$BACKUP_DIR" ]; then
        err_exit "cannot create $BACKUP_DIR, quitting"
    fi
}

fresh_ppas() {
    is_apt || return 1
    has_cmd trash-put || err_exit "no trash-put, cannot reset, quitting"
    is_linux && sudo trash-put /etc/apt/sources.list.d/* 2> /dev/null
}

fresh_install() {
    if [ -n "$DOTFILES" ]; then
        srm ~/seartipy/dotfiles
        srm ~/seartipy/lean-dotfiles
        srm ~/.tmux.conf
    fi

    if [ -n "$ZSH" ]; then
        srm ~/.zshrc
        srm ~/seartipy/vendors/antigen
        srm ~/.zgen
        srm ~/.slimzsh
    fi

    if [ -n "$BASH" ]; then
        srm ~/.bash_profile
        srm ~/seartipy/vendors/liquidprompt
    fi

    if [ -n "$SCALA" ]; then
        srm ~/.sbt
        srm ~/.ivy2
    fi

    if [ -n "$HASKELL" ]; then
        srm ~/.ghc
        srm ~/.stack
        srm ~/.cabal
    fi

    if [ -n "$EMACS" ]; then
        srm ~/.emacs.d
        srm ~/seartipy/emacses
        srm "/Applications/Emacs.app alias"
        rm -rf ~/.emacs.d/.cask
    fi

    if [ -n "$ATOM" ]; then
        srm ~/.atom
        srm ~/.proton
    fi

    if [ -n "$VSCODE" ]; then
        srm ~/.vscode
    fi

    if [ -n "$CLOJURE" ]; then
        srm ~/.len
        srm ~/.boot
        srm ~/.m2
    fi

    if [ -n "$WEB" ]; then
        srm ~/.npm
        srm ~/.nvm
        srm ~/.node-gyp
    fi

    if [ -n "$PYTHON" ]; then
        srm ~/.pyenv
    fi

    if [ -n "$RUBY" ]; then
        srm ~/.rvm
    fi

    if [ -n "$VIM" ]; then
        srm ~/.vim
    fi
}

create_dirs() {
    setup_backup_dir
    smd ~/seartipy/emacses
    smd ~/seartipy/vendors
    smd ~/bin
}

install_all() {
    [ -n "$DOTFILES" ] && dotfiles_install

    [ -n "$ZSH" ] && zsh_install
    [ -n "$BASH" ] && bash_install

    [ -n "$EMACS" ] && emacs_install
    [ -n "$ATOM" ] && atom_install
    [ -n "$VSCODE" ] && vscode_install

    [ -n "$GIT" ] && git_install

    [ -n "$PYTHON3" ] && python3_install

    [ -n "$JAVA" ] && java_install
    [ -n "$CLOJURE" ] && clojure_install
    [ -n "$SCALA" ] && scala_install

    [ -n "$WEB" ] && web_install

    [ -n "$PYTHON" ] && python_install

    [ -n "$HASKELL" ] && haskell_install
    [ -n "$PURESCRIPT" ] && purescript_install
    [ -n "$IDRIS" ] && idris_install
    [ -n "$ELM" ] && elm_install

    [ -n "$ELIXIR" ] && elixir_install
    [ -n "$R" ] && r_install

    [ -n "$CPP" ] && cpp_install
    [ -n "$RUST" ] && rust_install
    [ -n "$GO" ] && golang_install

    [ -n "$RUBY" ] && ruby_install

    [ -n "$SWIFT" ] && swift_install

    [ -n "$ADDITIONAL" ] && additional_install

    [ -n "$VIM" ] && vim_install
}

installer() {
    script_options $*

    if [ -n "$DIAGNOSTICS" ]; then
        post_installer_check
        exit 0
    fi

    echo "Installing $EMACS $VSCODE $ATOM $ZSH $BASH $GIT $JAVA $SCALA $WEB $CLOJURE $PYTHON $CPP $GO $HASKELL $RUBY $SWIFT $ELIXIR $R $VIM $THEMES $ADDITIONAL"

    [ -n "$FRESH" ]  && fresh_install

    [ -n "$ESSENTIAL" ] && essential_install

    pre_installer_check

    install_all

    if [ -n "$ZSH" ]; then
        echo "Set zsh as your default shell(this sometimes fails)"
        chsh -s /bin/zsh
    fi

    cleanup

    post_installer_check

    echo "Installation done!"
}

#
# diagnostics

pre_installer_check() {
    pre_cmd_check git curl wget unzip
    if is_apt; then
        pre_cmd_check trash-put
    else
        pre_cmd_check trash
    fi
    pre_dir_check "$BACKUP_DIR" ~/seartipy/emacses ~/seartipy/vendors ~/bin
}

ppas_check() {
    is_apt || return 1

    ppa_check google-chrome
    if is_ubuntu; then
       is_zesty || ppa_check ubuntu-make
    fi

    [ -n "$JAVA" ] && ppa_check 'webupd8team.*java'
    [ -n "$SCALA" ] && ppa_check sbt
    [ -n "$ATOM" ] && ppa_check 'webupd8team.*-atom'
    [ -n "$VSCODE" ] && ppa_check 'vscode'
    [ -n "$HASKELL" ] && ppa_check fpco
    [ -n "$ADDITIONAL" ] && ppa_check nilarimogard

    is_ubuntu || return 1

    [ -n "$R" ] && ppa_check rutter
}

essential_mac_check() {
    is_mac || return 1

    cmd_check brew trash 7z greadlink trash
}

essential_ubuntu_check() {
    is_apt || return 1

    ppas_check

    is_ubuntu && cmd_check umake
    cmd_check xsel xclip p7zip dconf google-chrome zeal firefox trash-put
}

essential_fedora_check() {
    is_fedora || return 1

    cmd_check xsel xclip 7za dconf g++ trash
}

essential_check() {
    cmd_check curl wget git tree ag fasd gpg tmux unar zip

    essential_mac_check
    essential_fedora_check
    essential_ubuntu_check
}

dotfiles_check() {
    dir_check ~/seartipy/dotfiles ~/seartipy/lean-dotfiles
    ln_check ~/seartipy/dotfiles/tmux.conf ~/.tmux.conf
}

zsh_check() {
    cmd_check zsh shellcheck

    ln_check ~/seartipy/dotfiles/zgen-zshrc ~/.zshrc
    dir_check ~/.slimzsh ~/seartipy/vendors/antigen ~/.zgen ~/seartipy/vendors/liquidprompt
    file_check ~/.zgen-options-local.sh
    file_check ~/.zshrc-pre-local.sh
}

bash_check() {
    is_mac && ln_check ~/seartipy/dotfiles/bashrc ~/.bashrc
    ln_check ~/seartipy/dotfiles/bashrc ~/.bash_profile
    if is_linux && ! grep .bash_profile ~/.bashrc > /dev/null; then
        warn "~/.bash_profile not sourced in ~/.bashrc"
    fi
    dir_check ~/seartipy/vendors/liquidprompt ~/.slimzsh ~/.zgen
}

emacs_check() {
    cmd_check emacs aspell
    if is_apt || is_mac; then
        cmd_check editorconfig
    fi
    is_linux && cmd_check ctags

    dir_check ~/seartipy/emacses/spacemacs ~/seartipy/emacses/housemd ~/seartipy/emacses/lean-emacs

    file_check ~/.spacemacs
    ln_check  ~/seartipy/emacses/housemd ~/.emacs.d
    ln_check ~/seartipy/lean-dotfiles/emacs-init.el ~/seartipy/emacses/lean-emacs/init.el

    cmd_check cask
}

atom_check() {
    cmd_check atom apm
    has_cmd apm || return 1

    apm_check proton-mode
    ln_check ~/seartipy/dotfiles/atom-proton ~/.proton
}

vscode_check() {
    is_fedora && return 1
    cmd_check code
}

java_check() {
    source "$HOME/.sdkman/bin/sdkman-init.sh"

    has_cmd javac java sdk groovy maven gradle
}

scala_check() {
    cmd_check javac sbt scala amm
    is_mac && brew_cask_check scala-ide

    ln_check ~/seartipy/dotfiles/sbt-plugins.sbt ~/.sbt/0.13/plugins/plugins.sbt
    ln_check ~/seartipy/dotfiles/sbt-global.sbt ~/.sbt/0.13/global.sbt
}

clojure_check() {
    cmd_check javac lein boot

    ln_check ~/seartipy/dotfiles/lein-profiles.clj ~/.lein/profiles.clj
    ln_check ~/seartipy/dotfiles/boot-profile.boot ~/.boot/profile.boot
}

web_check() {
    cmd_check flow
    cmd_check nvm

    cmd_check npm

    has_cmd npm || return 1
    cmd_check tsc flow yarn
    cmd_check eslint tslint jsonlint
    cmd_check tern js-beautify ijs
    cmd_check create-react-app ng feathers express
    npm_check eslint-config-react eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react eslint-plugin-flowtype babel-eslint
    cmd_check npm-check ncu lite-server
}

elixir_check() {
    cmd_check elixir
}

purescript_check() {
    cmd_check psc
}

idris_check() {
    cmd_check idris
}

elm_check() {
    cmd_check elm elm-oracle elm-make elm-reactor elm-repl elm-package elm-live
}

r_check() {
    :
}

haskell_check() {
    cmd_check ghc cabal stack

    cmd_check alex happy hlint stylish-haskell hasktags hindent hdevtools ghc-mod hoogle intero

    # cmd_check structured-haskell-mode
}

python3_check() {
    export PATH="$HOME/.local/bin:$PATH"
    cmd_check python3 pip3 git-up yapf flake8 jupyter ipython pep8 bokeh isort py.test ptw ptpython autoflake
}

python_check() {
    cmd_check pyenv
    is_mac && cmd_check pyenv-virtualenv

    is_linux && dir_check ~/.pyenv ~/.pyenv/plugins/pyenv-virtualenv

    has_cmd pyenv || return 1

    if ! pyenv versions | grep anaconda > /dev/null; then
        warn "anaconda not installed"
    fi
}

ruby_check() {
    source ~/.rvm/scripts/rvm

    cmd_check rvm ruby
    gem_check pry thin guard watchr tmuxinator sass overcommit
    is_mac && cmd_check xcpretty
}

swift_check() {
    is_mac && cmd_check swiftlint tailor pod carthage
}

cpp_check() {
    cmd_check cmake scons cppcheck clang++ clang-format
    is_linux && cmd_check g++
    is_fedora && cmd_check ninja-build
    is_apt && cmd_check ninja bear clang-tidy
    is_mac && cmd_check ninja bear
}

golang_check() {
    cmd_check go golint gocode godef goimports devd
}

additional_check() {
    if ! has_cmd vmware-user-suid-wrapper; then
        is_mac && cmd_check virtualbox
        brew_cask_check virtualbox-extension-pack
        is_ubuntu && cmd_check docker
    fi

    is_mac && brew_cask_check dash android-file-transfer transmission macdown vlc karabiner seil spectacle skype gitup discord alfred betterzipql qlcolorcode qlimagesize qlmarkdown qlprettypatch qlstephen quicklook-csv quicklook-json webpquicklook xquartz suspicious-package

    cmd_check icdiff jq http

    is_linux || return 0
    cmd_check jq http git-icdiff vlc youtube-dl
    has_cmd vmware-user-suid-wrapper || cmd_check virtualbox
}

git_check() {
    cmd_check kdiff3 git-extras
    is_linux && cmd_check meld
    is_mac && brew_cask_check smartgit hub github-desktop

    file_check ~/.gitconfig
}

vim_check() {
    cmd_check vim
    dir_check ~/.vim/janus
}

post_installer_check() {
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    export PATH="$HOME/.local/bin:$PATH"

    [ -f ~/.nvm/nvm.sh ] && source ~/.nvm/nvm.sh

    is_mac && export PATH="$PATH:/usr/local/opt/go/libexec/bin"

    export GOPATH="$HOME/golang-ws"
    if has_cmd go; then
        PATH="$PATH:$(go env GOROOT)/bin:$GOPATH/bin"
        export PATH
    fi

    export PATH="$HOME/.cask/bin:$PATH"

    essential_check
    dotfiles_check

    [ -n "$ZSH" ] && zsh_check
    [ -n "$BASH" ] && bash_check
    [ -n "$EMACS" ] && emacs_check
    [ -n "$ATOM" ] && atom_check
    [ -n "$VSCODE" ] && vscode_check

    [ -n "$GIT" ] && git_check

    [ -n "$JAVA" ] && java_check
    [ -n "$CLOJURE" ] && clojure_check
    [ -n "$SCALA" ] && scala_check

    [ -n "$WEB" ] && web_check
    [ -n "$CPP" ] && cpp_check
    [ -n "$GO" ] && golang_check
    [ -n "$PYTHON3" ] && python3_check
    [ -n "$PYTHON" ] && python_check
    [ -n "$HASKELL" ] && haskell_check

    [ -n "$RUBY" ] && ruby_check
    [ -n "$SWIFT" ] && swift_check

    # [ -n "$RUST" ] && rust_check
    [ -n "$ELIXIR" ] && elixir_check
    # [ -n "$R" ] && r_check
    [ -n "$PURESCRIPT" ] && purescript_check
    [ -n "$IDRIS" ] && idris_check
    [ -n "$ELM" ] && elm_check

    [ -n "$ADDITIONAL" ] && additional_check
    [ -n "$VIM" ] && vim_check
}

curdir=$(pwd)

if is_apt; then
    trash-put ~/seartipy-installer.log ~/seartipy-error.log ~/seartipy-output.log 2> /dev/null
else
    trash ~/seartipy-installer.log ~/seartipy-error.log ~/seartipy-output.log 2> /dev/null
fi

keep_sudo_running

create_dirs

export PATH="$HOME/bin:$PATH"

if [[ $- = *i* ]]; then
    slog "Running pre installer check..."
    slog "if this does not succeed you must first at least install essentials by running this script without parameters"
    pre_installer_check
    slog "installer check succeeded, you could run functions in this script for testing"
else
    installer "$@" > >(tee ~/seartipy-output.log) 2> >(tee ~/seartipy-error.log >&2)
fi

cd "$curdir"
