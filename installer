# utils

colorize() {
    if [ -t 1 ]; then
        printf "\e[%sm%s\e[m" 1 "$2"
    else
        echo -n "$2"
    fi
}

slog() {
    colorize "SEARTIPY : "
    echo $1
}

warn() {
    colorize "WARNING : "
    echo $1
}

err_exit() {
    colorize "FATAL: "
    echo $1
    exit 1
}

is_ubuntu() {
    has_cmd lsb_release || return 1
    local os=`echo $(lsb_release -i | cut -d ':' -f2)`
    [[ "Ubuntu" == "$os" ]] || return 1
}

is_fedora() {
    [ -f /etc/redhat-release ] || return 1
}

is_linux() {
    [ "$OSTYPE" == "linux-gnu" ] || return 1
}

is_mac() {
    [[ "$OSTYPE" == "darwin"* ]] || return 1
}

has_cmd() {
    command -v $1 > /dev/null
}

smv() {
    mv $1 $2 2> /dev/null
}

smd() {
    [ -d "$1" ] || mkdir -p "$1" 2> /dev/null
}

srm() {
    $trash $1 $2 2> /dev/null
}

sln() {
    if ! [ -e "$1" ]; then
        warn "$1 does not exist, cannot create the link $2"
    elif [ -L "$2" ]; then
        srm "$2"
    elif [ -e "$2" ]; then
        warn "$2 exists and not a symbolic link! not creating link"
        return
    fi
    ln -s $1 $2
}

sclone() {
    if ! [ -d "$2" ]; then
        slog "Cloning $1 to $2"
        git clone $1 $2
    fi
}

pre_cmd_check() {
    has_cmd "$1" || err_exit "$1 not installed"
}

cmd_check() {
    has_cmd "$1" || warn "$1 not installed"
}

pre_dir_check() {
    [ -d "$1" ] || err_exit  "$1 directory does not exist"
}

dir_check() {
    [ -d "$1" ] || warn "$1 directory does not exist"
}

ln_check() {
    local rl=readlink
    if is_mac; then
        rl=greadlink
    fi

     [[ "$1" == $($rl -f $2) ]] ||  warn "$2 not a link to $1"
}

#
# PPAs

add_java_ppa() {
    is_ubuntu || return 1
    if ! ls /etc/apt/sources.list.d | grep webupd8team-ubuntu-java > /dev/null; then
        slog "Adding java ppa"
        echo "oracle-java8-installer shared/accepted-oracle-license-v1-1 select true" | sudo debconf-set-selections
        sudo add-apt-repository ppa:webupd8team/java -y
    fi
}

add_scala_ppa() {
    is_ubuntu || return 1

    if ! ls /etc/apt/sources.list.d | grep sbt > /dev/null; then
        slog "Adding scala ppa"
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 642AC823
        echo "deb http://dl.bintray.com/sbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list
    fi
}

add_smartgit_ppa() {
    is_ubuntu || return 1

    if ! ls /etc/apt/sources.list.d | grep eugenesan-ubuntu-ppa > /dev/null; then
        slog "Adding smartgit ppa"
        sudo add-apt-repository ppa:eugenesan/ppa -y
    fi
}

add_haskell_stack_ppa() {
    is_ubuntu || return 1

        if ! ls /etc/apt/sources.list.d | grep fpco > /dev/null; then
        slog "Adding stack ppa"
        wget -q -O- https://s3.amazonaws.com/download.fpcomplete.com/ubuntu/fpco.key | sudo apt-key add -
        echo 'deb http://download.fpcomplete.com/ubuntu/wily stable main'|sudo tee /etc/apt/sources.list.d/fpco.list
    fi
}

add_ghc_ppa() {
    is_ubuntu || return 1

    if ! ls /etc/apt/sources.list.d | grep hvr-ubuntu-ghc > /dev/null; then
        slog "Adding ghc ppa"
        sudo add-apt-repository ppa:hvr/ghc -y
    fi
}

add_zeal_ppa() {
    is_ubuntu || return 1

    if ! ls /etc/apt/sources.list.d | grep zeal-developers-ubuntu > /dev/null; then
        slog "Adding zeal ppa"
        sudo add-apt-repository ppa:zeal-developers/ppa -y
    fi
}

add_chrome_ppa() {
    is_ubuntu || return 1

    if ! ls /etc/apt/sources.list.d | grep google.list > /dev/null; then
        slog "Adding google chrome ppa"
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
    fi
}

add_webupd8_ppa() {
    is_ubuntu || return 1

    if ! ls /etc/apt/sources.list.d | grep nilarimogard-ubuntu-webupd8 > /dev/null; then
        slog "Adding webupd8 ppa for youtub-dl etc"
        sudo add-apt-repository  ppa:nilarimogard/webupd8 -y
    fi
}

add_virtualbox_ppa() {
    is_ubuntu || return 1

    if ! has_cmd vmware-user-suid-wrapper; then
        slog "Adding virtualbox ppa"
        if ! grep download.virtualbox.org/virtualbox/debian /etc/apt/sources.list > /dev/null; then
            wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add -
            sudo sh -c 'echo "deb http://download.virtualbox.org/virtualbox/debian vivid contrib" >> /etc/apt/sources.list'
        fi
    fi
}

add_atom_ppa() {
    is_ubuntu || return 1

    if ! ls /etc/apt/sources.list.d | grep webupd8team-ubuntu-atom > /dev/null; then
        slog "Adding atom ppa"
        sudo add-apt-repository  ppa:webupd8team/atom -y
    fi
}

add_docker_ppa() {
    is_ubuntu || return 1

    if ! has_cmd vmware-user-suid-wrapper && ! ls /etc/apt/sources.list.d | grep docker > /dev/null; then
        slog "Installing docker"
        wget -qO- https://get.docker.com/ | sh
        sudo usermod -aG docker $USER
    fi
}

add_additional_ppas() {
    # add_zeal_ppa
    add_atom_ppa
    add_virtualbox_ppa
    add_docker_ppa
    add_chrome_ppa
    add_webupd8_ppa
    add_smartgit_ppa
}

add_ppas() {
    pre_cmd_check debconf-set-selections
    pre_cmd_check add-apt-repository
    pre_cmd_check apt-key
    pre_cmd_check wget

    if [ -n "$SCALA" ] || [ -n "$CLOJURE" ]; then
        add_java_ppa
    fi
    [ -n "$SCALA" ] && add_scala_ppa
    [ -n "$GIT" ] && add_smartgit_ppa
    # [ -n "$HASKELL" ] && add_ghc_ppa
    [ -n "$HASKELL" ] && add_haskell_stack_ppa

    [ -n "$ADDITIONAL" ] && add_additional_ppas
}

#
# essential

essential_ubuntu_install() {
    is_ubuntu || return 1

    pre_cmd_check apt-get
    add_ppas

    slog "Updating ubuntu"
    if ! sudo apt-get update; then
        err_exit "apt-get update failed, quitting"
    fi

    slog "Upgrading packages"
    if ! sudo apt-get upgrade -y; then
        err_exit "apt-get upgrade failed, quitting"
    fi

    slog "Installing essential packages"
    sudo apt-get install -y curl wget git trash-cli tree xsel xclip silversearcher-ag unrar p7zip dconf-cli build-essential chromium-browser tmux exfat-fuse exfat-utils linux-headers-`uname -r`

    sudo apt-get clean
    sudo apt-get autoclean
    sudo apt-get autoremove -y
}

essential_mac_install() {
    is_mac || return 1

    if ! has_cmd brew; then
        pre_cmd_check ruby

        slog "Installing homebrew"
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi

    pre_cmd_check brew

    slog "Installing brew cask"
    brew install caskroom/cask/brew-cask

    slog "Upgrading brew packages"
    brew update && brew upgrade

    brew install wget trash tree fasd unrar p7zip gpg the_silver_searcher coreutils tmux gpg
    brew cask install iterm2

    slog "cleanup brew"
    brew cleanup
    brew cask cleanup
}

essential_fedora_install() {
    is_fedora || return 1

    pre_cmd_check dnf

    slog "Add rpmfusion free and non free packages"
    sudo dnf install -y http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm

    slog "Installing essential packages"
    sudo dnf install -y curl wget git trash-cli tree xsel xclip the_silver_searcher unrar p7zip dconf tmux exfat-utils

    slog "dnf cleanup"
    sudo dnf clean all
}

essential_install() {
    essential_ubuntu_install
    essential_fedora_install
    essential_mac_install
}

#
# dotfiles

clone_lean_dotfiles() {
    slog "Backing up your current lean-dotfiles(if exists) to $BACKUP_DIR"
    smv ~/seartipy/lean-dotfiles $BACKUP_DIR

    slog "Cloning lean dotfiles"
    sclone https://perveziqbal@bitbucket.org/perveziqbal/lean-dotfiles.git ~/seartipy/lean-dotfiles
}

clone_dotfiles() {
    slog "Backing up your current dotfiles(if exists) to $BACKUP_DIR"
    smv ~/seartipy/dotfiles $BACKUP_DIR

    slog "Cloning dotfiles"
    sclone https://github.com/pervezfunctor/dotfiles.git ~/seartipy/dotfiles
}

dotfiles_install() {
    clone_lean_dotfiles
    clone_dotfiles
}

#
# bash

bash_dotfiles() {
    [ -f ~/seartipy/dotfiles/bashrc ] || return 1

    slog "Moving ~/.bash_profile to $BACKUP_DIR"
    smv ~/.bash_profile $BACKUP_DIR
    sln ~/seartipy/dotfiles/bashrc ~/.bash_profile

    if is_linux && ! grep .bash_profile ~/.bashrc > /dev/null; then
        echo "[ -f ~/.bash_profile ] && source ~/.bash_profile" >> ~/.bashrc
    fi
}

bash_install() {
    bash_dotfiles

    sclone https://github.com/nojhan/liquidprompt.git ~/seartipy/vendors/liquidprompt
}

#
# zsh

zsh_fedora_install() {
    is_fedora || return 1

    slog "Installing zsh"
    sudo dnf install -y zsh
}

zsh_ubuntu_install() {
    is_linux || return 1

    slog "Installing zsh"
    sudo apt-get install -y zsh
}

tmux_dotfiles() {
    [ -f ~/seartipy/dotfiles/tmux.conf ] || return 1

    slog "Moving ~/.tmux.conf to $BACKUP_DIR"
    smv ~/.tmux.conf $BACKUP_DIR

    slog "Linking ~/seartipy/dotfiles/tmux.conf to ~/.tmux.conf"
    sln ~/seartipy/dotfiles/tmux.conf ~/.tmux.conf
}

amethyst_dotfiles() {
    is_mac || return 1
    [ -f ~/seartipy/dotfiles/amethyst ] || return 1

    slog "Moving ~/.amethyst to $BACKUP_DIR"
    smv ~/.amethyst $BACKUP_DIR

    slog "Linking ~/seartipy/dotfiles/amethyst to ~/.amethyst"

    sln ~/seartipy/dotfiles/amethyst ~/.amethyst
}

zsh_dotfiles() {
    [ -f ~/seartipy/dotfiles/zshrc ] || return 1

    slog "Moving ~/.zshrc to $BACKUP_DIR "
    smv ~/.zshrc $BACKUP_DIR

    slog "Linking ~/seartipy/dotfiles/zshrc as ~/.zshrc"
    sln ~/seartipy/dotfiles/zshrc ~/.zshrc

    tmux_dotfiles
    amethyst_dotfiles
}

zsh_install() {
    zsh_fedora_install
    zsh_ubuntu_install

    zsh_dotfiles

    sclone https://github.com/changs/slimzsh.git ~/.slimzsh
    sclone https://github.com/zsh-users/antigen.git ~/seartipy/vendors/antigen
}

#
# emacs

emacs_mac_install() {
    is_mac || return 1

    slog "Tapping emacsport"
    [ -n "$EMACS" ] && brew tap railwaycat/emacsmacport

    slog "Installing emacs packages"
    brew install emacs-mac ---with-spacemacs-icon
    brew install editorconfig cask
    # TODO : ctags
    brew install aspell --with-lang-en

    slog "Trashing /Applications/Emacs.app alias (if exists)"
    srm '/Applications/Emacs.app alias'

    slog "Creating Emacs alias in /Applications"
    # make emacs available from spotlight
    osascript -e 'tell application "Finder" to make alias file to POSIX file "/usr/local/opt/emacs-mac/Emacs.app" at POSIX file "/Applications"'

    slog "Generating terminfo for terminal in emacs"
    local emacsversion=`ls /usr/local/Cellar/emacs-mac`
    tic -o ~/.terminfo /usr/local/Cellar/emacs-mac/${emacsversion}/share/emacs/24.5/etc/e/eterm-color.ti
}

emacs_fedora_install() {
    is_fedora || return 1

    slog "Installing emacs"
    sudo dnf install -y emacs aspell aspell-en ctags-etags
}

emacs_ubuntu_install() {
    is_ubuntu || return 1

    slog "Installing emacs"
    sudo apt-get install -y emacs24 aspell aspell-en editorconfig exuberant-ctags

}

spacemacs_dotfiles() {
    sclone https://github.com/syl20bnr/spacemacs ~/seartipy/emacses/spacemacs
    slog "Linking ~/seartipy/dotfiles/spacemacs as ~/.spacemacs"
    sln ~/seartipy/dotfiles/spacemacs ~/.spacemacs
}

leanemacs_dotfiles() {
    [ -f ~/seartipy/lean-dotfiles/emacs-init.el ] || return 1

    slog "Moving ~/seartipy/emacses/lean-emacs to $BACKUP_DIR (if it exists)"
    smv ~/seartipy/emacses/lean-emacs $BACKUP_DIR

    smd ~/seartipy/emacses/lean-emacs

    slog "Linking ~/seartipy/lean-dotfiles/emacs-init.el as ~/seartipy/emacses/lean-emacs/init.el"
    sln ~/seartipy/lean-dotfiles/emacs-init.el ~/seartipy/emacses/lean-emacs/init.el
}

housemd_dotfiles() {
    sclone  https://github.com/pervezfunctor/emacs.d ~/seartipy/emacses/housemd

    [ -d "$HOME/seartipy/emacses/housemd" ] || return 1

    slog "Moving ~/.emacs.d to $BACKUP_DIR (if they exist) "
    smv ~/.emacs.d $BACKUP_DIR

    slog "Linking ~/seartipy/emacses/housemd as ~/.emacs.d"
    sln ~/seartipy/emacses/housemd ~/.emacs.d
}

emacs_dotfiles() {
    spacemacs_dotfiles
    leanemacs_dotfiles
    housemd_dotfiles
}

emacs_cask_install() {
    is_linux || return 1

    export PATH="$HOME/.cask/bin:$PATH"
    has_cmd cask || curl -fsSL https://raw.githubusercontent.com/cask/cask/master/go | python
}

emacs_install() {
    emacs_mac_install
    emacs_fedora_install
    emacs_ubuntu_install

    emacs_dotfiles

    emacs_cask_install

    cd ~/seartipy/emacses/housemd || return 1

    [ -n "$SEARTIPY" ] && git checkout seartipy

    if ! has_cmd cask; then
        cask install && cask update
    else
        warn "cask command absent, skipping emacs install"
    fi
}

#
# git

git_mac_install() {
    is_mac || return 1

    slog "Installing git packages"
    brew cask install smartgit
    brew install kdiff3 git-extras
}

git_fedora_install() {
    is_fedora || return 1

    slog "Installing git"
    sudo dnf install -y kdiff3 git-extras meld
}

git_ubuntu_install() {
    is_ubuntu || return 1

    slog "Installing git"
    sudo apt-get install -y smartgit kdiff3 git-extras meld
}

git_install() {
    git_mac_install
    git_fedora_install
    git_ubuntu_install
}

#
# java

java_mac_install() {
    is_mac || return 1

    slog "Installing java"
    brew cask install java caskroom/homebrew-versions/java6 intellij-idea
}

java_fedora_install() {
    is_fedora || return 1

    slog "Installing java"
    sudo dnf install -y java-1.8.0-openjdk java-1.8.0-openjdk-src
}

java_ubuntu_install() {
    is_ubuntu || return 1

    slog "Installing Java"
    sudo apt-get install -y oracle-java8-installer oracle-java8-set-default
}

java_install() {
    java_mac_install
    java_fedora_install
    java_ubuntu_install
}

#
# clojure

lein_install() {
    is_linux || return 1
    has_cmd lein && return 1

    slog "Installing leiningen"
    curl -L https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein > ~/bin/lein
    chmod +x ~/bin/lein
}

boot_install() {
    is_linux || return 1

    if has_cmd boot; then
        boot -u
    else
        slog "Installing boot"
        curl -L https://github.com/boot-clj/boot-bin/releases/download/2.4.2/boot.sh > ~/bin/boot
        chmod a+x ~/bin/boot
    fi
}

clojure_mac_install() {
    is_mac || return 1

    slog "Installing clojure packages"
    brew install leiningen boot-clj
}

boot_dotfiles() {
    [ -f ~/seartipy/dotfiles/boot-profile.boot ] || return 1

    slog "Moving ~/.boot/profile.boot to $BACKUP_DIR (if exists)"
    smv ~/.boot/profile.boot $BACKUP_DIR

    smd ~/.boot

    slog "Linking ~/seartipy/dotfiles/boot-profile.boot as ~/.boot/profile.boot"
    sln ~/seartipy/dotfiles/boot-profile.boot ~/.boot/profile.boot
}

lein_dotfiles() {
    [ -f ~/seartipy/dotfiles/lein-profiles.clj ] || return 1

    slog "Moving ~/.lein/profiles.clj to $BACKUP_DIR (if exists)"
    smv ~/.lein/profiles.clj $BACKUP_DIR

    smd ~/.lein

    slog "Linking ~/seartipy/dotfiles/lein-profiles.clj as ~/.lein/profiles.clj"
    sln ~/seartipy/dotfiles/lein-profiles.clj ~/.lein/profiles.clj
}

clojure_dotfiles() {
    lein_dotfiles
    boot_dotfiles
}

clojure_install() {
    cmd_check javac

    clojure_mac_install
    lein_install
    boot_install

    clojure_dotfiles
}

#
# scala

scala_mac_install() {
    is_mac || return 1

    slog "Installing scala packages"
    brew install sbt scala
    brew cask install scala-ide
}

scala_fedora_install() {
    is_fedora || return 1

    slog "Installing scala"
    curl https://bintray.com/sbt/rpm/rpm | sudo tee /etc/yum.repos.d/bintray-sbt-rpm.repo
    sudo dnf install -y scala sbt
}

scala_ubuntu_install() {
    is_ubuntu || return 1

    slog "Install scala"
    sudo apt-get -y install sbt scala
}

sbt_plugins() {
    [ -f ~/seartipy/dotfiles/sbt-plugins.sbt ] || return 1

    slog "Moving ~/.sbt/0.13/plugins/plugins.sbt to $BACKUP_DIR (if exists)"
    smv ~/.sbt/0.13/plugins/plugins.sbt $BACKUP_DIR

    smd ~/.sbt/0.13/plugins

    slog "Linking ~/seartipy/dotfiles/sbt-plugins.sbt as ~/.sbt/0.13/plugins/plugins.sbt"
    sln ~/seartipy/dotfiles/sbt-plugins.sbt ~/.sbt/0.13/plugins/plugins.sbt
}

sbt_global() {
    [ -f ~/seartipy/dotfiles/sbt-global.sbt ] || return 1

    slog "Moving ~/.sbt/0.13/global.sbt to $BACKUP_DIR (if exists)"
    smv ~/.sbt/0.13/global.sbt $BACKUP_DIR

    smd ~/.sbt/0.13/

    slog "Linking ~/seartipy/dotfiles/sbt-global.sbt as ~/.sbt/0.13/global.sbt"
    sln ~/seartipy/dotfiles/sbt-global.sbt ~/.sbt/0.13/global.sbt
}

scala_dotfiles() {
    sbt_plugins
    sbt_global
}

scala_install() {
    scala_mac_install
    scala_fedora_install
    scala_ubuntu_install
    scala_dotfiles
}

#
# haskell

cabal_mac_install() {
    is_mac || return 1

    slog "Installing cabal"
    brew install ghc cabal-install
}

cabal_fedora_install() {
    is_fedora || return 1

    slog "Installing cabal"
    sudo dnf install -y ghc cabal-install
}

cabal_ubuntu_install() {
    is_ubuntu || return 1

    slog "Installing cabal"
    sudo apt-get install -y cabal-install ghc
}

cabal_install() {
    cabal_mac_install
    cabal_fedora_install
    cabal_ubuntu_install
}

stack_mac_install() {
    is_mac || return 1

    slog "Installing stack"
    brew install haskell-stack
}

stack_fedora_install() {
    is_fedora || return 1

    slog "Installing stack"
    sudo dnf copr -y enable petersen/stack
    sudo dnf install -y stack
}

stack_ubuntu_install() {
    is_ubuntu || return 1

    slog "Installing stack"
    sudo apt-get install -y stack
}

stack_install() {
    stack_mac_install
    stack_fedora_install
    stack_ubuntu_install
}

ihaskell_install() {
    has_cmd stack || return 1

    is_mac && brew install zeromq
    is_linux && sudo apt-get install -y libzmq3-dev
    is_fedora && sudo dnf install -y zeromq zeromq-dev
    stack install alex happy cpphs
    stack install ihaskell

    has_cmd ihaskell || return 1
    ihaskell install
}

haskell_install() {
    cabal_install
    stack_install

    slog "Installing stack packages"
    stack setup
    stack install alex
    stack install happy
    stack install hlint
    stack install structured-haskell-mode
    stack install stylish-haskell
    stack install hasktags
    stack install hindent
    stack install hdevtools

    ihaskell_install
}

#
# purescript

purescript_mac_install() {
    is_mac || return 1

    slog "Installing purescript"
    brew cask install purescript
}

purescript_linux_install() {
    is_linux || return 1

    node_linux_install

    has_cmd npm || return 1

    slog "Installing purescript"
    npm install -g purescript
}

purescript_install() {
    purescript_mac_install
    purescript_linux_install
}

#
# idris

idris_mac_install() {
    is_mac || return 1

    brew cask install idris
}

idris_linux_install() {
    is_linux || return 1

    cabal_install

    has_cmd cabal || return 1

    cabal update
    slog "Installing idris"
    cabal install idris
}

idris_install() {
    idris_mac_install
    idris_linux_install
}

#
# elm

elm_mac_install() {
    is_mac || return 1

    brew cask install elm-platform
}

elm_linux_install() {
    is_linux || return 1

    node_linux_install

    has_cmd npm || return 1

    slog "Installing elm"
    npm install -g elm
}

elm_install() {
    elm_mac_install
    elm_linux_install
}

#
# python

python_mac_install() {
    is_mac || return 1

    slog "Installing python packages"
    brew install pyenv pyenv-virtualenv homebrew/boneyard/pyenv-pip-rehash
}

python_linux_install() {
    is_linux || return 1

    sclone  https://github.com/yyuu/pyenv.git ~/.pyenv
    sclone https://github.com/yyuu/pyenv-pip-rehash.git ~/.pyenv/plugins/pyenv-pip-rehash
    sclone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
}

python_install() {
    python_mac_install
    python_linux_install

    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"

    has_cmd pyenv || return 1

    if ! pyenv versions | grep anaconda > /dev/null; then
        slog "Installing anaconda"
        local anacondaversion=`pyenv install --list | grep anaconda | tail -1`
        pyenv install $anacondaversion
    fi
}

#
# web

web_mac_install() {
    is_mac || return 1

    slog "Installing web packages"
    brew install node flow
    brew cask install webstorm
}

flow_install() {
    is_linux || return 1
    has_cmd flow || return 1

    slog "Installing flow"
    cd ~/seartipy/vendors
    wget https://facebook.github.io/flow/downloads/flow-linux64-latest.zip
    unzip -o flow-linux64-latest.zip
    srm flow-linux64-latest.zip
}

node_linux_install() {
    is_linux || return 1

    slog "Installing nvm"
    has_cmd nvm || curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash

    source ~/.nvm/nvm.sh
    nvm install stable
    nvm alias default stable
}

web_install() {
    web_mac_install
    node_linux_install
    flow_install

    has_cmd npm || return 1

    slog "Installing npm packages for web development"
    npm install -g coffee-script typescript babel webpack karma-cli eslint jshint coffeelint tern js-beautify webpack-dev-server eslint-plugin-react babel-eslint browserify watchify babelify budo gulp grunt-cli
}

#
# vim

vim_mac_install() {
    is_mac || return 1

    slog "Installing vim packages"
    brew install macvim --override-system-vim --with-lua --with-luajit
    brew linkapps macvim
}

vim_fedora_install() {
    is_fedora || return 1

    slog "Installing vim"
    sudo dnf install -y vim-enhanced
}

vim_ubuntu_install() {
    is_ubuntu || return 1

    slog "Installing vim"
    sudo apt-get install -y vim-gnome
}

vim_install() {
    vim_mac_install
    vim_fedora_install
    vim_ubuntu_install

    slog "Installing vim packages"
    [ -d ~/.spf13-vim-3 ] || curl http://j.mp/spf13-vim3 -L -o - | sh
}

#
# additional

fasd_install() {
    is_linux || return 1
    has_cmd fasd && return 1

    slog "Installing fasd"
    if git clone https://github.com/clvv/fasd.git ~/seartipy-installer-fasd; then
        cd ~/seartipy-installer-fasd && PREFIX=$HOME make install
        srm ~/seartipy-installer-fasd
    fi
}

sourcecodepro_install() {
    is_linux || return 1
    has_cmd fc-cache || return 1

    if ! ls ~/.fonts | grep SourceCodePro > /dev/null; then
        slog "Installing Source code pro fonts"
        wget https://github.com/adobe-fonts/source-code-pro/archive/2.010R-ro/1.030R-it.zip
        unzip -o 1.030R-it.zip
        smd ~/.fonts
        cp source-code-pro*/OTF/*.otf ~/.fonts
        fc-cache -f -v
        srm 1.030R-it.zip
        srm source-code-pro*
    fi
}

additional_mac_install() {
    is_mac || return 1

    slog "Installing additional packages"
    brew cask install atom google-chrome dash android-file-transfer virtualbox transmission macdown vlc karabiner seil spectacle skype gitup discord amethyst alfred
    brew cask install betterzipql qlcolorcode qlimagesize qlmarkdown qlprettypatch qlstephen quicklook-csv quicklook-json webpquicklook xquartz
    # brew cask install suspicious-package
    brew install youtube-dl
}

additional_fedora_install() {
    is_fedora || return 1

    slog "Installing additional packages"
    sudo dnf install -y vlc youtube-dl
    if ! has_cmd vmware-user-suid-wrapper; then
        sudo dnf install -y VirtualBox dkms
    fi
}

additional_ubuntu_install() {
    is_ubuntu || return 1

    slog "Installing additional"
    sudo apt-get install -y vlc youtube-dl atom google-chrome-stable
    if ! has_cmd vmware-user-suid-wrapper; then
        sudo apt-get install -y virtualbox-5.0 dkms
    fi
}

additional_install() {
    additional_mac_install
    additional_fedora_install
    additional_ubuntu_install

    sourcecodepro_install
    fasd_install
}

#
# xmonad

xmonad_fedora_install() {
    is_fedora || return 1

    slog "Installing xmonad"
    sudo dnf install -y xmonad ghc-xmonad-contrib xmonad-mate ghc-xmonad-devel ghc-xmonad-contrib-devel xmobar stalonetray dmenu scrot cabal-install xcompmgr
}

xmonad_ubuntu_install() {
    is_ubuntu || return 1

    slog "Installing xmonad"
    sudo apt-get install -y xmonad libghc-xmonad-contrib-dev xmobar stalonetray suckless-tools scrot cabal-install xcompmgr
}

xmonad_install() {
    is_linux || return 1

    xmonad_fedora_install
    xmonad_ubuntu_install

    has_cmd cabal || return 1

    slog "Installing xmonad"
    sudo cabal update
    sudo cabal install --global yeganesh

    slog "moving ~/.xmonad to $BACKUP_DIR"
    smv ~/.xmonad $BACKUP_DIR

    sclone https://github.com/pervezfunctor/xmonad-config ~/.xmonad

    slog "linking ~/.xmonad/bin/xsession to ~/.xinitrc"
    sln ~/.xmonad/bin/xsession ~/.xinitrc

    is_ubuntu || return 1

    slog "selecting dmenu.xft as default"
    sudo update-alternatives --set dmenu /usr/bin/dmenu.xft
}

#
# c++

cpp_ubuntu_install() {
    is_ubuntu || return 1

    slog "Installing C++"
    sudo apt-get install -y clang libclang-dev libc++-dev libc++abi-dev libboost-all-dev g++ cppcheck scons cmake
}

cpp_fedora_install() {
    is_fedora || return 1

    slog "Installing C++"
    sudo dnf install -y clang clang-devel clang-analyzer clang-libs boost boost-build  gcc-c++ cppcheck scons cmake
}

cpp_mac_install() {
    is_mac || return 1

    slog "Installing c++ packages"
    brew install boost --c++11
    brew install cmake scons boost-build cppcheck
    brew cask install clion
}

cpp_install() {
    cpp_mac_install
    cpp_fedora_install
    cpp_ubuntu_install
}

#
# elixir

elixir_fedora_install() {
    is_fedora || return 1

    slog "Installing elixir"
    sudo dnf install -y elixir
}

elixir_ubuntu_install() {
    is_ubuntu || return 1

    slog "Installing elixir"
    sudo apt-get install -y elixir
}

elixir_mac_install() {
    is_mac || return 1

    slog "Installing elixir"
    brew install elixir
}

elixir_install() {
    elixir_fedora_install
    elixir_ubuntu_install
    elixir_mac_install
}

#
# ruby

ruby_install() {
    if ! has_cmd rvm || ! rvm list rubies | grep "=* ruby"; then
        slog "Installing rvm"
        gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
        curl -sSL https://get.rvm.io | bash -s stable --ruby
    fi

    source ~/.rvm/scripts/rvm
    slog "Installing ruby gems"
    if is_mac; then
        gem install eventmachine -- --with-cppflags=-I/usr/local/opt/openssl/include
    fi
    gem install pry sinatra thin guard watchr tmuxinator git-up sass  --no-ri --no-rdoc
}

#
# settings

gnome_hidpi_conf() {
    is_linux || return 1
    has_cmd gnome-session || return 1

    local xres=$(xdpyinfo | grep dimensions | uniq | awk '{print $2}' |  cut -d 'x' -f1)
    if [ $xres -ge 2800 ]; then
        gsettings set org.gnome.desktop.interface scaling-factor 2
        gsettings set org.gnome.settings-daemon.plugins.xsettings overrides "{'Gdk/WindowScalingFactor': <2>}"
    fi

    if [ $xres -ge 3840 ]; then
        gsettings set org.gnome.desktop.interface text-scaling-factor .8
    fi
}

gnome_extensions() {
    is_linux || return 1
    has_cmd gnome-session || return 1
    [ -n "$SEARTIPY" ] || return 1

    gsettings set org.gnome.shell disable-extension-version-validation "true"

    gsettings set org.gnome.shell enabled-extensions "['windowsNavigator@gnome-shell-extensions.gcampax.github.com', 'workspace-indicator@gnome-shell-extensions.gcampax.github.com']"

    wget -O ~/bin/shell-extension-install https://raw.githubusercontent.com/NicolasBernaerts/ubuntu-scripts/master/ubuntugnome/gnome-extension/shell-extension-install
    chmod +x ~/bin/shell-extension-install

    local gnomever=$(gnome-shell --version | awk '{print $3}' | cut -d'.' -f1-2)

    shell-extension-install $gnomever 294 # shellshape
    shell-extension-install $gnomever 97  # coverflow alt-tab
    shell-extension-install $gnomever 442 # drop down terminal
    shell-extension-install $gnomever 413 # app keys
    shell-extension-install $gnomever 361 # emacs manager

    gsettings --schemadir ~/.local/share/gnome-shell/extensions/drop-down-terminal@gs-extensions.zzrough.org/ set org.zzrough.gs-extensions.drop-down-terminal real-shortcut "['F10']"
    gsettings --schemadir ~/.local/share/gnome-shell/extensions/shellshape@gfxmonk.net/data/glib-2.0/schemas set org.gnome.shell.extensions.net.gfxmonk.shellshape.prefs default-layout 'vertical'
}

gnome_settings() {
    is_linux || return 1
    has_cmd gnome-session || return 1

    dconf write /org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/login-shell true
    gsettings set org.gnome.Terminal.Legacy.Settings confirm-close false
    gsettings set org.gnome.Terminal.Legacy.Settings menu-accelerator-enabled false
    gsettings set org.gnome.system.locale region 'en_US.UTF-8'

    [ -n "$SEARTIPY" ] || return 1

    gsettings set org.gnome.desktop.wm.keybindings activate-window-menu "@as []"
    gsettings set org.gnome.desktop.wm.keybindings switch-input-source "@as []"
    gsettings set org.gnome.desktop.wm.keybindings switch-input-source-backward "@as []"
    gsettings set org.gnome.desktop.wm.keybindings switch-applications "['<Alt>Tab']"
    gsettings set org.gnome.settings-daemon.plugins.media-keys screensaver ''
    gsettings set org.gnome.desktop.input-sources xkb-options "['caps:ctrl_modifier', 'ctrl:lctrl_meta']"
    gsettings set org.gnome.desktop.interface gtk-key-theme Emacs

    gsettings set org.gnome.desktop.privacy remove-old-temp-files true
    gsettings set org.gnome.desktop.privacy remove-old-trash-files true
    gsettings set  org.gnome.desktop.screensaver lock-enabled false
    gsettings set  org.gnome.desktop.screensaver ubuntu-lock-on-suspend false
    gsettings set org.gnome.desktop.interface clock-show-date true
    gsettings set org.gnome.Terminal.Legacy.Settings default-show-menubar false
    gsettings set org.gnome.shell.calendar show-weekdate true

    [ -e ~/.config/gtk-3.0/settings.ini ] || printf "[Settings]\ngtk-application-prefer-dark-theme=1\n" > ~/.config/gtk-3.0/settings.ini
    gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-timeout 1800
    gsettings set org.gnome.desktop.session idle-delay 180
}

mate_settings() {
    is_linux || return 1
    has_cmd mate-session || return 1
    [ -n "$SEARTIPY" ] || return 1

    dconf write /org/mate/desktop/font-rendering/dpi "192.0"
    dconf write /org/mate/desktop/font-rendering/antialiasing "'rgba'"
    dconf write /org/mate/desktop/font-rendering/hinting "'slight'"

    dconf write /org/mate/desktop/peripherals/keyboard/kbd/options "['terminate\tterminate:ctrl_alt_bksp', 'ctrl\tctrl:lctrl_meta', 'caps\tcaps:ctrl_modifier']"
    dconf write /org/mate/desktop/peripherals/keyboard/kbd/options '@as []'

    dconf write /org/mate/marco/global-keybindings/panel-run-dialog "'<Mod4>space'"
    dconf write /org/mate/marco/window-keybindings/tile-to-side-e "'<Mod4>Right'"
    dconf write /org/mate/marco/window-keybindings/tile-to-side-w "'<Mod4>Left'"

    dconf write /org/mate/marco/global-keybindings/switch-to-workspace-1 "'<Primary>1'"
    dconf write /org/mate/marco/global-keybindings/switch-to-workspace-2 "'<Primary>2'"
    dconf write /org/mate/marco/global-keybindings/switch-to-workspace-3 "'<Primary>3'"
    dconf write /org/mate/marco/global-keybindings/switch-to-workspace-4 "'<Primary>4'"

    dconf write /org/mate/marco/global-keybindings/switch-to-workspace-left "'<Primary><Mod4>Left'"
    dconf write /org/mate/marco/global-keybindings/switch-to-workspace-right "'<Primary><Mod4>Right'"
    dconf write /org/mate/marco/global-keybindings/switch-to-workspace-up "'<Primary><Mod4>Up'"
    dconf write /org/mate/marco/global-keybindings/switch-to-workspace-down "'<Primary><Mod4>Down'"

    dconf write /org/mate/marco/window-keybindings/toggle-fullscreen "'F11'"
    dconf write /org/mate/marco/window-keybindings/toggle-maximized "'<Mod4>F11'"
    dconf write /org/mate/marco/window-keybindings/activate-window-menu "'disabled'"

    dconf write /org/mate/caja/preferences/click-policy "'single'"
    dconf write /org/mate/caja/preferences/executable-text-activation "'launch'"

    dconf write /org/mate/power-manager/sleep-computer-ac "1800"
    dconf write /org/mate/power-manager/sleep-display-ac "300"

    dconf write /org/mate/power-manager/lock-use-screensaver "false"
    dconf write /org/mate/power-manager/lock-suspend "false"
    dconf write /org/mate/terminal/profiles/default/login-shell "true"
    dconf write /org/mate/terminal/global/use-menu-accelerators "false"
    dconf write /org/mate/terminal/profiles/default/default-show-menubar "false"
}

linux_settings() {
    gnome_hidpi_conf
    gnome_settings
    gnome_extensions

    mate_settings
}

mac_settings() {
    is_mac || return 1
    [ -n "$SEARTIPY" ] || return 1

    # https://github.com/mathiasbynens/dotfiles/blob/978fb2696860ebe055a0caec425c67be0ad73319/.osx

    # Disable Resume system-wide
    defaults write NSGlobalDomain NSQuitAlwaysKeepsWindows -bool false

    # Check for software updates daily, not just once per week
    defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1


    # Disable Notification Center and remove the menu bar icon
    launchctl unload -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist

    # Disable smart quotes as they’re annoying when typing code
    defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

    # Disable smart dashes as they’re annoying when typing code
    defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

    # Trackpad: enable tap to click for this user and for the login screen
    defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
    defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
    defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

    # Disable “natural” (Lion-style) scrolling
    defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false

    # Increase sound quality for Bluetooth headphones/headsets
    defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40

    # Disable press-and-hold for keys in favor of key repeat
    defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

    # Set a blazingly fast keyboard repeat rate
    defaults write NSGlobalDomain KeyRepeat -int 0

    # Enable HiDPI display modes (requires restart)
    sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true

    # Finder: allow quitting via ⌘ + Q; doing so will also hide desktop icons
    defaults write com.apple.finder QuitMenuItem -bool true

    # Set Desktop as the default location for new Finder windows
    # For other paths, use `PfLo` and `file:///full/path/here/`
    defaults write com.apple.finder NewWindowTarget -string "PfDe"
    defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/Desktop/"

    # Show icons for hard drives, servers, and removable media on the desktop
    defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true
    defaults write com.apple.finder ShowHardDrivesOnDesktop -bool true
    defaults write com.apple.finder ShowMountedServersOnDesktop -bool true
    defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true

    # Finder: show all filename extensions
    defaults write NSGlobalDomain AppleShowAllExtensions -bool true

    # Avoid creating .DS_Store files on network volumes
    defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

    # Disable disk image verification
    defaults write com.apple.frameworks.diskimages skip-verify -bool true
    defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true
    defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true

    # Disable the warning before emptying the Trash
    defaults write com.apple.finder WarnOnEmptyTrash -bool false

    # Enable AirDrop over Ethernet and on unsupported Macs running Lion
    defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true

    # Show the ~/Library folder
    chflags nohidden ~/Library

    # Set the icon size of Dock items to 36 pixels
    defaults write com.apple.dock tilesize -int 36

    # Minimize windows into their application’s icon
    defaults write com.apple.dock minimize-to-application -bool true

    # Show indicator lights for open applications in the Dock
    defaults write com.apple.dock show-process-indicators -bool true

    # Disable Dashboard
    defaults write com.apple.dashboard mcx-disabled -bool true

    # Don’t show Dashboard as a Space
    defaults write com.apple.dock dashboard-in-overlay -bool true

    # Don’t automatically rearrange Spaces based on most recent use
    defaults write com.apple.dock mru-spaces -bool false

    # Set Safari’s home page to `about:blank` for faster loading
    defaults write com.apple.Safari HomePage -string "about:blank"

    # Prevent Safari from opening ‘safe’ files automatically after downloading
    defaults write com.apple.Safari AutoOpenSafeDownloads -bool false


    # Allow hitting the Backspace key to go to the previous page in history
    defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2BackspaceKeyNavigationEnabled -bool true

    # Disable Safari’s thumbnail cache for History and Top Sites
    defaults write com.apple.Safari DebugSnapshotsUpdatePolicy -int 2

    # Enable Safari’s debug menu
    defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

    # Hide Spotlight tray-icon (and subsequent helper)
    #sudo chmod 600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search
    # Disable Spotlight indexing for any volume that gets mounted and has not yet
    # been indexed before.
    # Use `sudo mdutil -i off "/Volumes/foo"` to stop indexing any volume.
    sudo defaults write /.Spotlight-V100/VolumeConfiguration Exclusions -array "/Volumes"
    # Change indexing order and disable some file types
    defaults write com.apple.spotlight orderedItems -array \
             '{"enabled" = 1;"name" = "APPLICATIONS";}' \
             '{"enabled" = 1;"name" = "SYSTEM_PREFS";}' \
             '{"enabled" = 1;"name" = "DIRECTORIES";}' \
             '{"enabled" = 1;"name" = "PDF";}' \
             '{"enabled" = 0;"name" = "DOCUMENTS";}' \
             '{"enabled" = 0;"name" = "EVENT_TODO";}' \
             '{"enabled" = 0;"name" = "BOOKMARKS";}' \
             '{"enabled" = 0;"name" = "MUSIC";}' \
             '{"enabled" = 0;"name" = "MOVIES";}' \
             '{"enabled" = 0;"name" = "PRESENTATIONS";}' \
             '{"enabled" = 0;"name" = "SPREADSHEETS";}' \
             '{"enabled" = 0;"name" = "SOURCE";}'

    # Only use UTF-8 in Terminal.app
    defaults write com.apple.terminal StringEncodings -array 4

    # Don’t display the annoying prompt when quitting iTerm
    defaults write com.googlecode.iterm2 PromptOnQuit -bool false

}

settings() {
    linux_settings
    mac_settings
}

#
# installer

select_everything() {
    ZSH="zsh"
    BASH="bash"
    EMACS="emacs"
    DOTFILES="dotfiles"
    JAVA="java"
    SCALA="scala"
    CLOJURE="clojure"
    WEB="web"
    PYTHON="python"
    HASKELL="haskell"
    RUBY="ruby"
    CPP="cpp"
    ADDITIONAL="additional"
    VIM="vim"
    XMONAD="xmonad"
    ELIXIR="elixir"
    PURESCRIPT="purescript"
    ELM="elm"
    IDRIS="idris"
    RUST="rust"
    R="r"
}

script_options() {
    if [ $# -eq 0 ]; then
        select_everything
    else
        ZSH="zsh"
        BASH="bash"
        EMACS="emacs"
        DOTFILES="dotfiles"
    fi

    if [ "$USER" == "pervez" ] || [ "$USER" == "tabrez" ] || [ "$USER" == "wasay" ]; then
        SEARTIPY="seartipy"
    fi

    while [[ $# > 0 ]]; do
        case $1 in
            java)
                JAVA="java"
                shift
                ;;
            clojure)
                JAVA="java"
                CLOJURE="clojure"
                shift
                ;;
            scala)
                JAVA="java"
                SCALA="scala"
                shift
                ;;
            web)
                WEB="web"
                shift
                ;;
            nodefaults)
                ZSH=""
                BASH=""
                EMACS=""
                DOTFILES=""
                shift
                ;;
            nozsh)
                ZSH=""
                shift
                ;;
            noemacs)
                EMACS=""
                shift
                ;;
            nobash)
                BASH=""
                shift
                ;;
            nodotfiles)
                DOTFILES=""
                shift
                ;;
            noseartipy)
                SEARTIPY=""
                shift
                ;;
            diagnostics)
                DIAGNOSTICS="diagnostics"
                shift
                ;;
            haskell)
                PURESCRIPT="purescript"
                IDRIS="idris"
                ELM="elm"
                HASKELL="haskell"
                shift
                ;;
            ruby)
                RUBY="ruby"
                shift
                ;;
            cpp)
                RUST="rust"
                CPP="cpp"
                shift
                ;;
            python)
                PYTHON="python"
                shift
                ;;
            elixir)
                ELIXIR="elixir"
                shift
                ;;
            additional)
                ADDITIONAL="additional"
                VIM="vim"
                shift
                ;;
            xmonad)
                XMONAD="xmonaad"
                shift
                ;;
            seartipy)
                SEARTIPY="seartipy"
                shift
                ;;
            vim)
                VIM="vim"
                shift
                ;;
            idris)
                IDRIS="idris"
                shift
                ;;
            rust)
                RUST="rust"
                shift
                ;;
            purescript)
                PURESCRIPT="purescript"
                shift
                ;;
            elm)
                ELM="elm"
                shift
                ;;
            r)
                R="r"
                shift
                ;;
            fresh)
                FRESH="fresh"
                shift
                ;;
            elixir)
                ELIXIR="elixir"
                shift
                ;;
            everything)
                select_everything
                shift
                ;;
            *)
                shift # ignore unknown option
                ;;
        esac
    done
}

keep_sudo_running() {
    # Ask for the administrator password upfront
    sudo -v

    # Keep-alive: update existing `sudo` time stamp until `.osx` has finished
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
}

setup_backup_dir() {
    BACKUP_DIR=~/seartipy.backups

    if [ -d "$BACKUP_DIR" ]; then
        slog "moving $BACKUP_DIR to trash"
        srm $BACKUP_DIR
    fi

    smd $BACKUP_DIR

    if ! [ -d "$BACKUP_DIR" ]; then
        err_exit "cannot create $BACKUP_DIR, quitting"
    fi
}

fresh_ppas() {
    is_linux || return 1
}

fresh_install() {
    if [ -n "$DOTFILES" ]; then
        srm ~/seartipy/dotfiles
        srm ~/seartipy/lean-dotfiles
        srm ~/.tmux.conf
        srm ~/.amethyst
    fi

    if [ -n "$ZSH" ]; then
        srm ~/.zshrc
        srm ~/seartipy/vendors/antigen
    fi

    if [ -n "$BASH" ]; then
        srm ~/.bash_profile
        srm ~/seartipy/vendors/liquidprompt
    fi

    if [ -n "$SCALA" ]; then
        srm ~/.sbt
        srm ~/.ivy2
    fi

    if [ -n "$HASKELL" ]; then
        srm ~/.cabal
    fi

    if [ -n "$EMACS" ]; then
        srm ~/.emacs.d
        srm ~/seartipy/emacses
        srm "/Applications/Emacs.app alias"
        rm -rf ~/.cask
    fi

    if [ -n "$CLOJURE" ]; then
        srm ~/.len
        srm ~/.boot
        srm ~/.m2
    fi

    if [ -n "$XMONAD" ]; then
        srm ~/.xmonad
    fi

    if [ -n "$WEB" ]; then
        srm ~/.npm
        srm ~/.nvm
        srm ~/.node-gyp
    fi

    if [ -n "$PYTHON" ]; then
        srm ~/.pyenv
    fi

    if [ -n "$RUBY" ]; then
        srm ~/.rvm
    fi

    if [ -n "$VIM" ]; then
        srm ~/.spf13-vim-3
    fi
}

create_dirs() {
    setup_backup_dir
    smd ~/seartipy/emacses
    smd ~/seartipy/vendors
    smd ~/bin
}

install_all() {
    [ -n "$DOTFILES" ] && dotfiles_install

    [ -n "$ZSH" ] && zsh_install
    [ -n "$BASH" ] && bash_install
    [ -n "$EMACS" ] && emacs_install
    [ -n "$GIT" ] && git_install

    [ -n "$JAVA" ] && java_install
    [ -n "$CLOJURE" ] && clojure_install
    [ -n "$SCALA" ] && scala_install

    [ -n "$WEB" ] && web_install
    [ -n "$CPP" ] && cpp_install
    [ -n "$PYTHON" ] && python_install
    [ -n "$HASKELL" ] && haskell_install

    [ -n "$RUBY" ] && ruby_install
    # [ -n "$RUST" ] && rust_install
    [ -n "$ELIXIR" ] && elixir_install
    # [ -n "$R" ] && r_install
    [ -n "$PURESCRIPT" ] && purescript_install
    [ -n "$IDRIS" ] && idris_install
    [ -n "ELM" ] && elm_install

    if [ -n "$ADDITIONAL" ]; then
        settings
        additional_install
    fi
    [ -n "$XMONAD" ] && xmonad_install
    [ -n "$VIM" ] && vim_install
}

installer() {
    keep_sudo_running

    script_options $*

    if [ -n "$DIAGNOSTICS" ]; then
        post_installer_check
        exit 0
    fi

    echo "Installing $EMACS $ZSH $BASH $SCALA $WEB $CLOJURE $PYTHON $CPP $HASKELL $RUBY $ELIXIR $XMONAD $VIM $ADDITIONAL"
    [ -n "$FRESH" ]  && fresh_install

    essential_install

    if is_ubuntu; then
        trash=trash-put
    else
        trash=trash
    fi
    create_dirs

    export PATH="$HOME/bin:$PATH"

    pre_installer_check

    install_all

    if [ -n "$ZSH" ]; then
        echo "Set zsh as your default shell(this sometimes fails)"
        chsh -s /bin/zsh
    fi

    post_installer_check

    echo "Installation done!"
}

#
# diagnostics

pre_installer_check() {
    pre_cmd_check git
    pre_cmd_check curl
    pre_cmd_check wget
    pre_cmd_check unzip
    pre_cmd_check $trash

    [ -d "$BACKUP_DIR" ] || err_exit "cannot create $BACKUP_DIR, quitting"
    [ -d ~/seartipy/emacses ] || err_exit "cannot create ~/seartipy/emacses, quitting"
    [ -d ~/seartipy/vendors ] || err_exit "cannot create ~/seartipy/vendors, quitting"
    [ -d ~/bin ] || err_exit "~/bin does not exist, quitting"
}

essential_mac_check() {
    is_mac || return 1

    cmd_check brew
    cmd_check trash
    cmd_check 7z
    cmd_check greadlink
 }

ppas_check() {
    is_ubuntu || return 1

    if [ -n "$SCALA" ] || [ -n "$CLOJURE" ]; then
        if ! ls /etc/apt/sources.list.d | grep webupd8team-ubuntu-java > /dev/null; then
            warn 'java ppa not added'
        fi
    fi

    if [ -n "$SCALA" ] && ! ls /etc/apt/sources.list.d | grep sbt > /dev/null; then
        warn 'sbt ppa not added'
    fi
}

essential_ubuntu_check() {
    is_ubuntu || return 1

    ppas_check

    cmd_check xsel
    cmd_check xclip
    cmd_check p7zip
    cmd_check dconf
}

essential_fedora_check() {
    is_fedora || return 1

    cmd_check xsel
    cmd_check xclip
    cmd_check 7za
    cmd_check dconf
}

essential_check() {
    cmd_check curl
    cmd_check wget
    cmd_check git
    cmd_check $trash
    cmd_check tree
    cmd_check fasd
    cmd_check unrar
    cmd_check 7z
    cmd_check gpg
    cmd_check gpg
    cmd_check tmux

    essential_mac_check
    essential_fedora_check
    essential_ubuntu_check
}

dotfiles_check() {
    dir_check ~/seartipy/dotfiles
    dir_check ~/seartipy/lean-dotfiles
}

zsh_check() {
    cmd_check zsh

    ln_check ~/seartipy/dotfiles/zshrc ~/.zshrc
    ln_check ~/seartipy/dotfiles/tmux.conf ~/.tmux.conf

    dir_check ~/.slimzsh
    dir_check ~/seartipy/vendors/antigen
    dir_check ~/seartipy/vendors/liquidprompt
}

bash_check() {
    ln_check ~/seartipy/dotfiles/bashrc ~/.bash_profile
    dir_check ~/seartipy/vendors/liquidprompt
}

emacs_check() {
    cmd_check emacs
    cmd_check aspell
    if is_ubuntu || is_mac; then
        cmd_check editorconfig
    fi
    is_linux && cmd_check ctags

    dir_check ~/seartipy/emacses/spacemacs
    dir_check ~/seartipy/emacses/housemd
    dir_check ~/seartipy/emacses/lean-emacs

    ln_check ~/seartipy/dotfiles/spacemacs ~/.spacemacs

    ln_check  ~/seartipy/emacses/housemd ~/.emacs.d

    ln_check ~/seartipy/lean-dotfiles/emacs-init.el ~/seartipy/emacses/lean-emacs/init.el

    is_linux && cmd_check cask
}

scala_check() {
    cmd_check javac
    cmd_check sbt
    cmd_check scala

    ln_check ~/seartipy/dotfiles/sbt-plugins.sbt ~/.sbt/0.13/plugins/plugins.sbt
    ln_check ~/seartipy/dotfiles/sbt-global.sbt ~/.sbt/0.13/global.sbt
}

clojure_check() {
    cmd_check javac
    cmd_check lein
    cmd_check boot

    ln_check ~/seartipy/dotfiles/lein-profiles.clj ~/.lein/profiles.clj
    ln_check ~/seartipy/dotfiles/boot-profile.boot ~/.boot/profile.boot

    if is_linux; then
        cmd_check lein
        cmd_check boot
    fi
}

web_check() {
    cmd_check flow

    if is_mac; then
        export PATH=$(npm config get prefix)/bin:$PATH
    fi

    if is_linux; then
        source ~/.nvm/nvm.sh
        cmd_check nvm
    fi

    cmd_check npm

    if has_cmd npm; then
        cmd_check budo
        cmd_check browserify
        cmd_check watchify
        cmd_check coffee
        cmd_check babel
        cmd_check webpack
        cmd_check eslint
        cmd_check jshint
        cmd_check coffeelint
        cmd_check tern
        cmd_check js-beautify
        cmd_check webpack-dev-server
    fi

}

elixir_check() {
    cmd_check elixir
}

purescript_check() {
    cmd_check psc
}

idris_check() {
    export PATH="$HOME/.cabal/bin:$PATH"
    cmd_check idris
}

elm_check() {
    source ~/.nvm/nvm.sh
    cmd_check elm
}

r_check() {
    :
}

haskell_check() {
    export PATH="$HOME/.local/bin:$PATH"

    cmd_check ghc
    cmd_check cabal
    cmd_check stack

    cmd_check alex
    cmd_check happy
    cmd_check hlint
    cmd_check structured-haskell-mode
    cmd_check stylish-haskell
    cmd_check hasktags
    cmd_check hindent
    cmd_check hdevtools
}

python_check() {
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"

    cmd_check pyenv

    has_cmd pyenv || return 1

    if ! pyenv versions | grep anaconda > /dev/null; then
        warn "anaconda not installed"
    fi
}

ruby_check() {
    cmd_check rvm
    cmd_check ruby

    cmd_check pry
    cmd_check thin
    cmd_check guard
    cmd_check watchr
    cmd_check tmuxinator
    cmd_check git-up
    cmd_check sass
}

cpp_check() {
    cmd_check cmake
    cmd_check scons
    cmd_check cppcheck
    cmd_check clang++
    is_linux && cmd_check g++
}

additional_check() {
    if is_linux; then
        cmd_check fasd

        if ! ls ~/.fonts 2> /dev/null | grep SourceCodePro > /dev/null; then
            warn "source code pro not installed"
        fi

        cmd_check xmonad
        cmd_check vim
    fi

    if is_mac; then
        cmd_check docker
    fi
}

settings_check() {
    if has_cmd gnome-session; then
        [ 'false' == $(dconf read /org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/login-shell) ] || warn 'terminal not configured to run as login shell'

        [[ 'en_US.UTF-8' == $(gsettings set org.gnome.system.locale region 'en_US.UTF-8') ]] || warn 'system locale not set to en_US UTF8'
    fi
}

git_check() {
    cmd_check smartgit
    cmd_check kdiff3
    cmd_check meld
}

vim_check() {
    cmd_check vim
    dir_check ~/.spf13-vim-3
}

xmonad_check() {
    cmd_check xmonad dmenu
}

xmonad_check() {
    # check ~/.xmonad/xmonad.hs exists
    cmd_check xmonad
}

post_installer_check() {
    essential_check
    dotfiles_check

    [ -n "$ZSH" ] && zsh_check
    [ -n "$BASH" ] && bash_check
    [ -n "$EMACS" ] && emacs_check
    [ -n "$GIT" ] && git_check

    [ -n "$CLOJURE" ] && clojure_check
    [ -n "$SCALA" ] && scala_check

    [ -n "$WEB_CHECK" ] && web_check
    [ -n "$CPP" ] && cpp_check
    [ -n "$PYTHON" ] && python_check
    [ -n "$HASKELL" ] && haskell_check

    [ -n "$RUBY" ] && ruby_check
    # [ -n "$RUST" ] && rust_check
    [ -n "$ELIXIR" ] && elixir_check
    # [ -n "$R" ] && r_check
    [ -n "$PURESCRIPT" ] && purescript_check
    [ -n "$IDRIS" ] && idris_check
    [ -n "$ELM" ] && elm_check

    if [ -n "$ADDITIONAL" ]; then
        additional_check
        settings_check
    fi
    [ -n "$XMONAD" ] && xmonad_check
    [ -n "$VIM" ] && vim_check
}

curdir=`pwd`

rm -f ~/seartipy-installer.log  ~/seartipy-error.log ~/seartipy-output.log

installer $* > >(tee ~/seartipy-output.log) 2> >(tee ~/seartipy-error.log >&2)

cd $curdir
