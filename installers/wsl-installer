#! /usr/bin/env bash

{

DOTFILES_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"

source "$DOTFILES_DIR/scripts/utils.sh"

#
# essential

ubuntu_update() {
    slog "Updating ubuntu"
    if ! sudo apt-get update; then
        err_exit "apt-get update failed, quitting"
    fi
}

ubuntu_upgrade() {
    slog "Upgrading packages"
    if ! sudo apt-get upgrade -y; then
        err_exit "apt-get upgrade failed, quitting"
    fi
}

essential_install() {
    pre_cmd_check apt-get

    sudo apt-get install -y software-properties-common apt-transport-https ca-certificates
    pre_cmd_check debconf-set-selections add-apt-repository apt-key wget

    ubuntu_update
    ubuntu_upgrade

    slog "Installing essential packages"
    sudo apt-get install -y curl wget git trash-cli tree xsel xclip fzf
    sudo apt-get install -y silversearcher-ag p7zip dconf-cli build-essential
    sudo apt-get install -y tmux unar unzip libzmq3-dev pkg-config zip gawk
    sudo apt-get install -y urlview ubuntu-make exfat-utils
    sudo apt-get install -y exfat-fuse python-is-python3

    dotfiles_install
    zsh_install
    bash_install
    git_install
}

#
# cleanup

cleanup() {
    sudo apt-get clean
    sudo apt-get autoclean
    sudo apt-get autoremove -y
}

#
# dotfiles

clone_dotfiles() {
    sclone https://gitlab.com/seartipy/dotfiles.git ~/seartipy/dotfiles
    [ -d ~/seartipy/dotfiles ] || return 1

    pre_dir_check ~/seartipy/dotfiles
}

tmux_dotfiles() {
    [ -f ~/seartipy/dotfiles/tmux.conf ] || return 1

    slog "Moving ~/.tmux.conf to $BACKUP_DIR"
    smv ~/.tmux.conf "$BACKUP_DIR"

    slog "Linking ~/seartipy/dotfiles/tmux.conf to ~/.tmux.conf"
    sln ~/seartipy/dotfiles/tmux.conf ~/.tmux.conf

    smd ~/.tmux/plugins
    sclone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
}

dotfiles_install() {
    clone_dotfiles
    tmux_dotfiles
}

#
# bash

linux_bash_dotfiles() {
    [ -f ~/seartipy/dotfiles/bashrc ] || return 1

    slog "Moving ~/.bash_profile to $BACKUP_DIR"
    smv ~/.bash_profile "$BACKUP_DIR"
    sln ~/seartipy/dotfiles/bashrc ~/.bash_profile

    if ! grep .bash_profile ~/.bashrc > /dev/null; then
        echo "[ -f ~/.bash_profile ] && source ~/.bash_profile" >> ~/.bashrc
    fi
}

bash_install() {
    linux_bash_dotfiles

    sclone https://github.com/nojhan/liquidprompt.git ~/.liquidprompt
}

#
# zsh

zsh_dotfiles() {
    [ -f ~/seartipy/dotfiles/zgen-zshrc ] || return 1

    slog "Moving ~/.zshrc to $BACKUP_DIR "
    smv ~/.zshrc "$BACKUP_DIR"

    slog "Linking ~/seartipy/dotfiles/zgen-zshrc as ~/.zshrc"
    sln ~/seartipy/dotfiles/zgen-zshrc ~/.zshrc

    slog "Copying ~/seartipy/dotfiles/templates/zgen-options-local.sh to ~/.zgen-options-local.sh"
    scopy ~/seartipy/dotfiles/templates/zgen-options-local.sh ~/.zgen-options-local.sh

    slog "Copying ~/seartipy/dotfiles/templates/zgen-pre-local.sh to ~/.zgen-pre-local.sh"
    scopy ~/seartipy/dotfiles/templates/zshrc-pre-local.sh ~/.zshrc-pre-local.sh
}

zsh_install() {
    slog "Installing zsh"
    sudo apt-get install -y zsh
    sudo apt-get install -y shellcheck

    zsh_dotfiles

    sclone https://github.com/tarjoilija/zgen.git ~/.zgen
}

#
# git

git_install() {

    slog "Installing git"
    sudo apt-get install -y git-extras git

    scopy ~/seartipy/dotfiles/templates/gitconfig ~/.gitconfig

    if [ "$USER" = "pervez" ]; then
        git config --global user.name "Pervez Iqbal"
        git config --global user.email "pervezfunctor@gmail.com"
    fi
}

#
# java

java_install() {
    has_cmd javac && javac -version 2>&1 | grep "1.8" > /dev/null && return 0

    slog "Installing Java"
    sudo apt-get install -y default-8-jdk default-8-doc
}

#
# clojure

linux_lein_install() {
    has_cmd ~/bin/lein && return 1

    slog "Installing leiningen"
    curl -L https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein > ~/bin/lein
    chmod +x ~/bin/lein
}

clojure_install() {
    java_install
    linux_lein_install
}

#
# scala

scala_install() {
    java_install
    slog "Install scala"

    curl -Lo cs https://git.io/coursier-cli-linux && chmod +x cs && ./cs setup --yes
}

#
# web

nvm_install() {
    [ -s ~/.nvm/nvm.sh ] && source ~/.nvm/nvm.sh

    slog "Installing nvm"
    if ! has_cmd nvm; then
        smd ~/.nvm
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash
        source ~/.nvm/nvm.sh
    fi
    has_cmd nvm || return 1

    nvm install node
    nvm alias default node
}

web_install() {
    nvm_install

    slog "Installing npm packages for web development"
    npi yarn bash-language-server @microsoft/rush pnpm npm-check-updates

    if ! grep "fs.inotify.max_user_watches" /etc/sysctl.conf > /dev/null; then
        echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf > /dev/null && sudo sysctl -p
    fi
}

#
# c++

cpp_install() {
    slog "Installing C++"
    sudo apt-get install -y clang libclang-dev libc++-dev libc++abi-dev libboost-all-dev g++ cppcheck scons cmake bear clang-format clang-tidy ninja-build lldb
}

#
# installer

select_everything() {
    ESSENTIAL="essential"

    SCALA="scala"
    CLOJURE="clojure"
    WEB="web"
    CPP="cpp"
}

script_options() {
    ESSENTIAL="essential"

    while [[ $# -gt 0 ]]; do
        case $1 in
            essential)
                ESSENTIAL="essential"
                shift
                ;;
            clojure)
                CLOJURE="clojure"
                shift
                ;;
            scala)
                SCALA="scala"
                shift
                ;;
            web)
                WEB="web"
                shift
                ;;
            noessential)
                ESSENTIAL=""
                shift
                ;;
            diagnostics)
                DIAGNOSTICS="diagnostics"
                shift
                ;;
            cpp)
                CPP="cpp"
                shift
                ;;
            everything)
                select_everything
                shift
                ;;
            *)
                err_exit "unknown option $1"
                ;;
        esac
    done
}

keep_sudo_running() {
    # Ask for the administrator password upfront
    sudo -v

    # Keep-alive: update existing `sudo` time stamp until `.osx` has finished
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
}

setup_backup_dir() {
    BACKUP_DIR=~/seartipy.backups

    if [ -d "$BACKUP_DIR" ]; then
        slog "moving $BACKUP_DIR to trash"
        srm $BACKUP_DIR
    fi

    smd $BACKUP_DIR

    if ! [ -d "$BACKUP_DIR" ]; then
        err_exit "cannot create $BACKUP_DIR, quitting"
    fi
}


create_dirs() {
    setup_backup_dir
    smd ~/bin
}

install_all() {
    [ -n "$CLOJURE" ] && clojure_install
    [ -n "$SCALA" ] && scala_install
    [ -n "$WEB" ] && web_install
    [ -n "$CPP" ] && cpp_install
}

installer() {
    script_options $*

    if [ -n "$DIAGNOSTICS" ]; then
        post_installer_check
        exit 0
    fi

    echo "Installing $EMACS $ZSH $BASH $GIT $JAVA $SCALA $WEB $CLOJURE $CPP"

    [ -n "$ESSENTIAL" ] && essential_install

    pre_installer_check

    install_all

    if [ -n "$ZSH" ]; then
        echo "Set zsh as your default shell(this sometimes fails)"
        chsh -s /bin/zsh
    fi

    cleanup

    post_installer_check

    echo "Installation done!"
}

#
# diagnostics

pre_installer_check() {
    pre_cmd_check git curl wget unzip
    pre_cmd_check trash-put
    pre_dir_check "$BACKUP_DIR" ~/bin
}

essential_check() {
    cmd_check curl wget git tree ag fzf gpg tmux unar zip gawk urlview

    cmd_check p7zip dconf xsel xclip trash-put
    cmd_check umake
    dotfiles_check
    bash_check
    zsh_check
    git_check
}

dotfiles_check() {
    dir_check ~/seartipy/dotfiles
    ln_check ~/seartipy/dotfiles/tmux.conf ~/.tmux.conf
    dir_check ~/.tmux/plugins/tpm
}

zsh_check() {
    cmd_check zsh shellcheck

    ln_check ~/seartipy/dotfiles/zgen-zshrc ~/.zshrc
    dir_check ~/.zgen
    file_check ~/.zgen-options-local.sh
    file_check ~/.zshrc-pre-local.sh
}

bash_check() {
    ln_check ~/seartipy/dotfiles/bashrc ~/.bash_profile

    if ! grep .bash_profile ~/.bashrc > /dev/null; then
        warn "~/.bash_profile not sourced in ~/.bashrc"
    fi
    dir_check ~/.liquidprompt
}

scala_check() {
    cmd_check javac sbt scala amm

    ln_check ~/seartipy/dotfiles/sbt-plugins.sbt ~/.sbt/1.0/plugins/plugins.sbt
    ln_check ~/seartipy/dotfiles/sbt-global.sbt ~/.sbt/1.0/global.sbt
}

clojure_check() {
    cmd_check javac lein
    ln_check ~/seartipy/dotfiles/lein-profiles.clj ~/.lein/profiles.clj
}

web_check() {
    cmd_check nvm
    cmd_check npm

    has_cmd npm || return 1

    cmd_check yarn bash-language-server ncu pnpm rush

    if ! grep "fs.inotify.max_user_watches" /etc/sysctl.conf > /dev/null; then
        warn "max user watches not set properly in /etc/sysctl.conf"
    fi
}

cpp_check() {
    cmd_check cmake scons cppcheck clang++ g++
    cmd_check ninja bear clang-format clang-tidy
}

git_check() {
    cmd_check git git-extras

    file_check ~/.gitconfig
}

post_installer_check() {
    [ -f ~/.nvm/nvm.sh ] && source ~/.nvm/nvm.sh

    essential_check

    [ -n "$CLOJURE" ] && clojure_check
    [ -n "$SCALA" ] && scala_check
    [ -n "$WEB" ] && web_check
    [ -n "$CPP" ] && cpp_check
}

is_ubuntu || err_exit "code not installed. First install visual studio code"

curdir=$(pwd)

trash-put ~/seartipy-installer.log ~/seartipy-error.log ~/seartipy-output.log 2> /dev/null

keep_sudo_running

create_dirs

export PATH="$HOME/bin:$PATH"

if [[ $- = *i* ]]; then
    slog "Running pre installer check..."
    slog "if this does not succeed you must first at least install essentials by running this script without parameters"
    pre_installer_check
    slog "installer check succeeded, you could run functions in this script for testing"
else
    installer "$@" > >(tee ~/seartipy-output.log) 2> >(tee ~/seartipy-error.log >&2)
fi

cd "$curdir"

}
