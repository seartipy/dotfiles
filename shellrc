# aliases

if [[ "$OSTYPE" == "linux-gnu" ]]; then
    #haskell
    alias cabal="cabal-1.22"

    alias upgrade="sudo apt-get update && sudo apt-get upgrade -y"
    alias pbcopy="xsel --clipboard --input"
    alias pbpaste="xsel --clipboard --output"
    alias open="xdg-open"
    alias trash=trash-put

    alias tmux="tmux -u -2" #force tmux to use unicode and 256 colors

    #to support xterm key bindings in emacs
    alias e="TERM=xterm-256color emacs -nw"

elif [[ "$OSTYPE" == "darwin"* ]]; then
    alias upgrade="brew update && brew upgrade"
fi

# exports

if [[ "$OSTYPE" == "linux-gnu" ]]; then
    #java
    export JAVA_HOME="/usr/lib/jvm/java-8-oracle"
    export JDK_HOME="/usr/lib/jvm/java-8-oracle"

    #haskell
    export PATH="/opt/ghc/7.10.2/bin:$PATH"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    #java
    export JAVA_HOME=`/usr/libexec/java_home -v 1.8`
    export JDK_HOME=`/usr/libexec/java_home -v 1.8`
fi

#ruby
export PATH="$HOME/.rvm/bin:$PATH"

#haskell
export PATH="$HOME/.cabal/bin:$PATH"

# haskell stack
export PATH="$HOME/.local/bin:$PATH"

#emacs
export PATH="$HOME/.cask/bin:$PATH"

#node
export NVM_DIR="$HOME/.nvm"

#flow
export PATH="$PATH:$SEARTIPY_HOME/vendors/flow"

#python
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

export PATH="$HOME/bin:$PATH"

# sources

#node
[ -s "$HOME/.nvm/nvm.sh" ] && source "$HOME/.nvm/nvm.sh"

#rvm
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

#python
if command -v pyenv > /dev/null; then
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi

# utils

colorize() {
    if [ -t 1 ]; then
        printf "\e[%sm%s\e[m" 1 "$2"
    else
        echo -n "$2"
    fi
}

log() {
    echo $1 >> ~/seartipy_installer.log
}

warn() {
    colorize "WARNING : "
    echo $1
}

err_exit() {
    colorize "FATAL: "
    echo $1
    exit 1
}

is_linux() {
    [ "$OSTYPE" == "linux-gnu" ] || return 1
}

is_mac() {
    [[ "$OSTYPE" == "darwin"* ]] || return 1
}

has_cmd() {
    command -v $1 > /dev/null
}

smd() {
    [ -d "$1" ] || mkdir -p "$1"
}

sln() {
    if ! [ -e "$1" ]; then
        warn "$1 does not exist, cannot create the link $2"
    else
        if [ -L "$2" ]; then
            trash "$2"
        elif [ -e "$2" ]; then
            warn "$2 exists and not a symbolic link! not creating link"
            return
        fi
    fi
    ln -s $1 $2 2>> ~/errors.log
}

# functions

seartipy_fix_links() {
    sln ~/seartipy/dotfiles/zshrc ~/.zshrc
    sln ~/seartipy/dotfiles/lein-profiles.clj ~/.lein/profiles.clj
    sln ~/seartipy/dotfiles/sbt-plugins.sbt ~/.sbt/0.13/plugins/plugins.sbt
    sln ~/seartipy/dotfiles/spacemacs ~/.spacemacs
    sln ~/seartipy/dotfiles/tmux.conf ~/.tmux.conf
    sln ~/seartipy/emacses/housemd ~/.emacs.d
}

seartipy_upgrade_all() {
    upgrade
    cd ~/seartipy/dotfiles && git-up
    cd ~/seartipy/lean-dotfiles && git-up
    cd ~/seartipy/emacses/housemd && git-up
    cd ~/seartipy/emacses/spacemacs && git-up
    has_cmd cask && cd ~/seartipy/emacses/housemd && cask upgrade-cask && cask install && cask update
    has_cmd sbt && sbt console -batch
    has_cmd lein && lein
    has_cmd npm && npm update -g
}

seartipy_emacs_default() {
    sln "$HOME/seartipy/emacses/$1" ~/.emacs.d
}

seartipy_ctrl_alt_set() {
    if is_linux; then
        gsettings set org.gnome.desktop.input-sources xkb-options "['caps:ctrl_modifier', 'ctrl:lctrl_meta']"
    else
        warn "this command works only in linux"
    fi
}

seartipy_ctrl_alt_reset() {
    if is_linux; then
        gsettings set org.gnome.desktop.input-sources xkb-options "@as []"
    else
        warn "this command works only in linux"
    fi
}

seartipy_lean_system() {
    sln ~/seartipy/lean-dotfiles/zshrc ~/.zshrc
    sln ~/seartipy/lean-dotfiles/lein-profiles.clj ~/.lein/profiles.clj
    sln ~/seartipy/lean-dotfiles/sbt-plugins.sbt ~/.sbt/0.13/plugins/plugins.sbt
    sln ~/seartipy/lean-dotfiles/spacemacs ~/.spacemacs
    sln ~/seartipy/emacses/lean-emacs ~/.emacs.d
}
