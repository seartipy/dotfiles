#! /bin/bash

BOLD=$(tput bold)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
RESET=$(tput sgr0)
# WHITE=$(tput setaf 7)

slog() {
    echo "
${BOLD}${GREEN}SEARTIPY: ${RESET} $1
"
}

warn() {
    echo "
${BOLD}${YELLOW}WARNING: ${RESET} $1
"
}

error() {
    echo "
${BOLD}${RED}FATAL : ${RESET} $1
"
}

is_linux() {
    [[ "$OSTYPE" == "linux-gnu" ]]
}

is_ubuntu() {
    has_cmd lsb_release || return 1
    local os=`echo $(lsb_release -i | cut -d ':' -f2)`
    [[ "Ubuntu" == "$os" ]] || [[ "neon" == "$os" ]]
}

is_fedora() {
    [ -f /etc/redhat-release ]
}

is_mac() {
    [[ "$OSTYPE" == "darwin"* ]]
}

has_cmd() {
    command -v $1 > /dev/null
}

smd() {
    [ -d "$1" ] || mkdir -p "$1"
}

sln() {
    if ! [ -e "$1" ]; then
        warn "$1 does not exist, cannot create the link $2"
        return 1
    elif [ -L "$2" ]; then
        trash "$2"
    elif [ -e "$2" ]; then
        warn "$2 exists and not a symbolic link! not creating link"
        return 1
    fi
    ln -s $1 $2
}

scopy() {
    [ -e "$2" ] || cp "$1" "$2"
}

if is_linux; then
    alias upgrade="sudo apt-get update && sudo apt-get upgrade -y"
    alias pbcopy="xsel --clipboard --input"
    alias pbpaste="xsel --clipboard --output"
    alias open="xdg-open"

    alias tmux="tmux -u -2" #force tmux to use unicode and 256 colors

    #to support xterm key bindings in emacs
    alias e="TERM=xterm-256color emacs -nw"
fi

if is_ubuntu; then
    alias trash=trash-put

    #java
    export JAVA_HOME="/usr/lib/jvm/java-8-oracle"
    export JDK_HOME="/usr/lib/jvm/java-8-oracle"
fi

if is_fedora; then
    alias upgrade="sudo dnf upgrade -y"

    export JAVA_HOME="/etc/alternatives/java_sdk"
    export JDK_HOME="/etc/alternatives/java_sdk"
fi

if is_mac; then
    alias upgrade="brew update && brew upgrade"

    #java
    export JAVA_HOME=`/usr/libexec/java_home -v 1.8`
    export JDK_HOME=`/usr/libexec/java_home -v 1.8`

    #brew
    export PATH="/usr/local/bin:$PATH"

    #golang
    export PATH="$PATH:/usr/local/opt/go/libexec/bin"
fi


#haskell
export PATH="$HOME/.cabal/bin:$PATH"

# haskell stack
export PATH="$HOME/.local/bin:$PATH"

#node
export NVM_DIR="$HOME/.nvm"

#python
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

#emacs
export PATH="$HOME/.cask/bin:$PATH"
export ALTERNATE_EDITOR=""
export EDITOR="emacsclient -t"                  # $EDITOR should open in terminal
export VISUAL="emacsclient -c -a emacs"         # $VISUAL opens in GUI with non-daemon as alternate

export PATH="$HOME/bin:$PATH"

#go
if has_cmd go; then
    export GOPATH="$HOME/golang-ws"
    export PATH="$PATH:$(go env GOROOT)/bin:$GOPATH/bin"
fi

# sources

#node
[ -s "$HOME/.nvm/nvm.sh" ] && source "$HOME/.nvm/nvm.sh"

#python
if has_cmd pyenv > /dev/null; then
    eval "$(pyenv init - --no-rehash)"
    eval "$(pyenv virtualenv-init -)"
fi

#rvm
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

seartipy_fix_links() {
    sln ~/seartipy/dotfiles/shellrc ~/.bash_profile
    sln ~/seartipy/dotfiles/zgen-zshrc ~/.zshrc

    smd ~/.lein
    smd ~/.boot
    smd ~/.sbt/0.13

    sln ~/seartipy/dotfiles/lein-profiles.clj ~/.lein/profiles.clj
    sln ~/seartipy/dotfiles/boot-profile.boot ~/.boot/profile.boot

    sln ~/seartipy/dotfiles/sbt-plugins.sbt ~/.sbt/0.13/plugins/plugins.sbt
    sln ~/seartipy/dotfiles/sbt-global.sbt ~/.sbt/0.13/global.sbt

    sln ~/seartipy/emacses/housemd ~/.emacs.d

    sln ~/seartipy/dotfiles/tmux.conf ~/.tmux.conf
    is_mac && sln ~/seartipy/dotfiles/amethyst ~/.amethyst

    scopy ~/seartipy/dotfiles/templates/spacemacs ~/.spacemacs
}

seartipy_cask_backup() {
    if ! has_cmd cask; then
        warn "cask not installed, cannot backup elpa"
        return 1
    fi

    local ELPA_DIR ELPA_PARENT ELPA_BACKUP ROLLBACK_COUNT OLDEST_BACKUP

    if ! cd ~/seartipy/emacses/housemd; then
        warn "no ~/seartipy/emacses/housemd, cannot backup"
        return 1
    fi

    ELPA_DIR=$(cask package-directory)
    [ -d "$ELPA_DIR" ] || return 1

    ELPA_PARENT=$(dirname "$ELPA_DIR")
    [ -d "$ELPA_PARENT" ] || return 1

    ELPA_BACKUP="${ELPA_PARENT}/elpa-rollback-$(date +"%Y-%m-%d-%H-%M-%S")"

    cp -r "$ELPA_DIR" "$ELPA_BACKUP"

    ROLLBACK_COUNT=$(ls $ELPA_PARENT | grep "^elpa-rollback-" | wc -l | cut -d " " -f 2)

    [ "$ROLLBACK_COUNT" -gt 5 ] || return 1

    OLDEST_BACKUP=$ELPA_PARENT/$(ls -1v $ELPA_PARENT | grep "^elpa-rollback" | head -1)
    if [ -d "$OLDEST_BACKUP" ]; then
        trash "$OLDEST_BACKUP"
    else
        warn "cannot trash old backup $OLDEST, as it does not exist. This cannot happen!"
    fi
}

seartipy_cask_rollback() {
    if ! has_cmd cask; then
        warn "cask not installed, cannot rollback elpa"
        return 1
    fi

    if ! cd ~/seartipy/emacses/housemd; then
        warn "no ~/seartipy/emacses/housemd, cannot backup"
        return 1
    fi

    local ELPA_DIR ELPA_PARENT LATEST_BACKUP

    ELPA_DIR=$(cask package-directory)
    [ -d "$ELPA_DIR" ] || return 1

    ELPA_PARENT=$(dirname "$ELPA_DIR")
    [ -d "$ELPA_PARENT" ] || return 1

    LATEST_BACKUP="$(ls -1v "$ELPA_PARENT" | grep "^elpa-rollback" | tail -1)"

    if [ -z "$LATEST_BACKUP" ]; then
        warn "no backups, cannot rollback"
        return 1
    fi

    if ! [ -d "$ELPA_PARENT/${LATEST_BACKUP}" ]; then
        error "no backups available, skipping"
        return 1
    fi

    trash "$ELPA_DIR"

    if [ -d "$ELPA_DIR" ]; then
        warn "cannot trash $ELPA_DIR, can not rolling back"
    elif ! mv "$ELPA_PARENT/$LATEST_BACKUP" "$ELPA_DIR"; then
        error "cannot move $LATEST_BACKUP to $ELPA_DIR; previous $ELPA_DIR must be in trash"
    fi
}

seartipy_upgrade_emacs() {
    cd ~/seartipy/emacses/housemd && git pull --ff-only
    has_cmd cask && seartipy_cask_backup && cd ~/seartipy/emacses/housemd && cask install && cask upgrade-cask
}

seartipy_upgrade_dotfiles() {
    cd ~/seartipy/dotfiles && git pull --ff-only
    cd ~/seartipy/lean-dotfiles && git pull --ff-only
}

seartipy_upgrade_mean() {
    upgrade
    seartipy_upgrade_dotfiles
    seartipy_upgrade_emacs
    has_cmd zgen && zgen selfupdate && zgen update
    has_cmd zplug && zplug update
}

seartipy_nvm_dist_upgrade() {
    has_cmd nvm || return 1

    cd "$NVM_DIR" && git fetch origin && git checkout `git describe --abbrev=0 --tags`
    source "$NVM_DIR/nvm.sh"

    nvm install node --reinstall-packages-from=node
    nvm alias default node
}

seartipy_conda_upgrade_all() {
    conda update --all
}

# http://stackoverflow.com/questions/2720014/upgrading-all-packages-with-pip
seartipy_pip_upgrade_all() {
    pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs pip install -U
}

seartipy_gem_upgrade_all() {
    gem update
    gem update --system
}

seartipy_upgrade_all() {
    seartipy_upgrade_mean
    cd && has_cmd sbt && sbt console -batch
    cd && has_cmd lein && lein
    cd && has_cmd npm && npm update -g
    cd && has_cmd cabal && cabal update
    cd && has_cmd stack && stack update
    cd && has_cmd boot && boot -u && boot
    cd && has_cmd stack && stack update
    cd && has_cmd pyenv && pyenv rehash
}

seartipy_emacs_default() {
    sln "$HOME/seartipy/emacses/$1" ~/.emacs.d
}

seartipy_emacs_launch() {
    seartipy_emacs_default $*
    is_mac && open -a /Applications/Emacs.app
    is_linux && emacs&
}

seartipy_kill_emacs() {
    emacsclient -e "(progn (setq kill-emacs-hook nil) (save-buffers-kill-emacs))"
}

seartipy_ctrl_alt_set() {
    is_linux || return 1
    has_cmd gnome-session && gsettings set org.gnome.desktop.input-sources xkb-options "['caps:ctrl_modifier', 'ctrl:lctrl_meta']"
    has_cmd mate-session && dconf write /org/mate/desktop/peripherals/keyboard/kbd/options "['ctrl\tctrl:lctrl_meta', 'caps\tcaps:ctrl_modifier']"
}

seartipy_ctrl_alt_reset() {
    is_linux || return 1
    has_cmd gnome-session && gsettings set org.gnome.desktop.input-sources xkb-options "@as []"
    has_cmd mate-session && dconf write /org/mate/desktop/peripherals/keyboard/kbd/options '@as []'
}

seartipy_lean_system() {
    sln ~/seartipy/lean-dotfiles/zshrc ~/.zshrc
    sln ~/seartipy/lean-dotfiles/lein-profiles.clj ~/.lein/profiles.clj
    sln ~/seartipy/lean-dotfiles/sbt-plugins.sbt ~/.sbt/0.13/plugins/plugins.sbt
    sln ~/seartipy/emacses/lean-emacs ~/.emacs.d
}

alias cas=seartipy_ctrl_alt_set
alias car=seartipy_ctrl_alt_reset

alias sse="seartipy_emacs_default spacemacs"
alias sle="seartipy_emacs_default lean-emacs"
alias she="seartipy_emacs_default housemd"

alias es="seartipy_emacs_launch spacemacs"
alias el="seartipy_emacs_launch lean-emacs"
alias eh="seartipy_emacs_launch housemd"

alias ec="emacsclient -c -n"
alias et="emacsclient -t"

alias emacs-kill="seartipy_kill_emacs"
alias emacs-restore="seartipy_cask_rollback"

alias upa=seartipy_upgrade_all
alias upm=seartipy_upgrade_mean
alias ups=upgrade
alias upe=seartipy_upgrade_emacs
alias upd=seartipy_upgrade_dotfiles

alias sfl=seartipy_fix_links

alias gst="git status"

if is_ubuntu; then
    alias si="sudo apt-get install -y"
    alias ss="sudo apt-cache search"
    alias sr="sudo apt-get purge"
fi

if is_mac; then
    alias si="brew install"
    alias ss="brew search"
    alias sr="brew uninstall"
fi

if is_fedora; then
    alias si="sudo dnf install -y"
    alias ss="sudo dnf search"
    alias sr="sudo dnf remove"
fi
