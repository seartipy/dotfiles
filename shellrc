#! /bin/bash

#
# utils

BOLD=$(tput bold)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
RESET=$(tput sgr0)
# WHITE=$(tput setaf 7)

slog() {
    echo "
${BOLD}${GREEN}SEARTIPY: ${RESET} $1
"
}

warn() {
    echo "
${BOLD}${YELLOW}WARNING: ${RESET} $1
"
}

error() {
    echo "
${BOLD}${RED}FATAL : ${RESET} $1
"
}

is_linux() {
    [[ "$OSTYPE" == "linux-gnu" ]]
}

is_ubuntu() {
    has_cmd lsb_release || return 1
    local os
    os=$(lsb_release -i | cut -d ':' -f2)
    [[ "$os" == *"Ubuntu" ]] || [[ "$os" == *"neon" ]] || [[ "$os" == *"elementary OS" ]] || [[ "$os" == *"LinuxMint" ]]
}

is_mac() {
    [[ "$OSTYPE" == "darwin"* ]]
}

has_cmd() {
    command -v "$1" > /dev/null
}

smd() {
    [ -d "$1" ] || mkdir -p "$1"
}

sln() {
    if ! [ -e "$1" ]; then
        warn "$1 does not exist, cannot create the link $2"
        return 1
    elif [ -L "$2" ]; then
        trash "$2"
    elif [ -e "$2" ]; then
        warn "$2 exists and not a symbolic link! not creating link"
        return 1
    fi
    ln -s "$1" "$2"
}

srm() {
    for f in "$@"; do
        if [ -L "$f" ]; then
            rm -f "$f"
        elif is_ubuntu; then
            trash-put "$f" 2> /dev/null && slog "Trashed $f"
        else
            trash "$f" 2> /dev/null && slog "Trashed $f"
        fi
    done
}

scopy() {
    [ -e "$2" ] || cp "$1" "$2"
}

if is_linux; then
    alias upgrade="sudo apt-get update && sudo apt-get upgrade -y"
    alias pbcopy="xsel --clipboard --input"
    alias pbpaste="xsel --clipboard --output"
    alias open="xdg-open"
fi

if is_ubuntu; then
    alias trash=trash-put

    #java
    export JAVA_HOME="/usr/lib/jvm/java-8-oracle"
    export JDK_HOME="/usr/lib/jvm/java-8-oracle"
fi

if is_mac; then
    alias upgrade="brew update && brew upgrade"

    #java
    JAVA_HOME=$(/usr/libexec/java_home -v 1.8 2> /dev/null)
    export JAVA_HOME

    JDK_HOME=$(/usr/libexec/java_home -v 1.8 2> /dev/null)
    export JDK_HOME

    #brew
    export PATH="/usr/local/sbin:/usr/local/bin:$PATH"

fi

# exports

#haskell
export PATH="$HOME/.cabal/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH" # haskell stack

#node
export NVM_DIR="$HOME/.nvm"

#python
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

#emacs
export ALTERNATE_EDITOR=""
export EDITOR="emacsclient -t"                  # $EDITOR should open in terminal
export VISUAL="emacsclient -c -a emacs"         # $VISUAL opens in GUI with non-daemon as alternate

export PATH="$HOME/bin:$PATH"

# sources

#node
[ -s "$HOME/.nvm/nvm.sh" ] && source "$HOME/.nvm/nvm.sh"

#python
if has_cmd pyenv > /dev/null; then
    eval "$(pyenv init - --no-rehash)"
    eval "$(pyenv virtualenv-init -)"
fi

seartipy_fix_links() {
    if ! [ -d ~/seartipy/dotfiles ]; then
        smd ~/seartipy
        git clone https://gitlab.com/seartipy/dotfiles.git ~/seartipy/dotfiles
    fi
    if ! [ -d ~/seartipy/dotfiles ]; then
        error "no ~/seartipy/dotfiles, cannot fix links"
    fi

    # bash
    sln ~/seartipy/dotfiles/bashrc ~/.bash_profile
    is_mac && sln ~/seartipy/dotfiles/bashrc ~/.bashrc
    if is_linux && ! grep .bash_profile ~/.bashrc > /dev/null; then
        echo "[ -f ~/.bash_profile ] && source ~/.bash_profile" >> ~/.bashrc
    fi

    # zsh
    has_cmd zsh && sln ~/seartipy/dotfiles/zgen-zshrc ~/.zshrc

    # emacs
    has_cmd emacs && sln ~/seartipy/emacses/emacsd ~/.emacs.d

    # clojure
    if has_cmd lein; then
        smd ~/.lein
        sln ~/seartipy/dotfiles/lein-profiles.clj ~/.lein/profiles.clj
    fi

    # scala
    if has_cmd sbt; then
        smd ~/.sbt/1.0/plugins
        sln ~/seartipy/dotfiles/sbt-plugins.sbt ~/.sbt/1.0/plugins/plugins.sbt
        sln ~/seartipy/dotfiles/sbt-global.sbt ~/.sbt/1.0/global.sbt
    fi

    has_cmd tmux && sln ~/seartipy/dotfiles/tmux.conf ~/.tmux.conf

    is_mac && sln ~/seartipy/dotfiles/amethyst ~/.amethyst

    if has_cmd xmonad; then
        smd ~/.xmonad
        sln ~/seartipy/dotfiles/xmonad.hs ~/.xmonad/xmonad.hs
    fi
}

# emacs

seartipy_kill_emacs() {
    emacsclient -e "(progn (setq kill-emacs-hook nil) (save-buffers-kill-emacs '(4)))"
}

function seartipy_emacs_upgrade() {
    emacs -batch --eval "(progn (load-file \"~/.emacs.d/init.el\") (package-refresh-contents) (auto-package-update-now) (package-autoremove)"
}

function seartipy_emacs_clean() {
    srm ~/.emacs.d/.cache ~/.emacs.d/auto-save-list ~/.emacs.d/.last-package-update-day
}

# upgrade

seartipy-gitup() {
    cd "$1" 2> /dev/null || return 1

    if has_cmd git-up; then
        git-up
    else
        git pull --ff-only
    fi
}

seartipy_upgrade_emacs() {
    seartipy-gitup ~/seartipy/emacses/emacsd
    seartipy_emacs_upgrade
}

seartipy_upgrade_dotfiles() {
    seartipy-gitup ~/seartipy/dotfiles
    seartipy-gitup ~/seartipy/dotdotfiles
}

seartipy_upgrade_mean() {
    upgrade
    seartipy_upgrade_dotfiles
    seartipy_upgrade_emacs
    has_cmd zgen && zgen selfupdate && zgen update
    has_cmd zplug && zplug update
}

seartipy_nvm_dist_upgrade() {
    has_cmd nvm || return 1

    cd "$NVM_DIR" && git fetch origin && git checkout "$(git describe --abbrev=0 --tags)"
    cd
    source "$NVM_DIR/nvm.sh"

    nvm install node --reinstall-packages-from=node
    nvm alias default node
}

seartipy_conda_upgrade_all() {
    conda update --all
}

# http://stackoverflow.com/questions/2720014/upgrading-all-packages-with-pip
seartipy_pip_upgrade_all() {
    pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs pip install -U
}

seartipy_upgrade_all() {
    if [ -d ~/.cask ]; then
        srm ~/.cask
        srm ~/seartipy/emacses/emacsd
        srm ~/.emacs.d
        git clone https://pervezfunctor@gitlab.com/seartipy/emacsd.git ~/seartipy/emacses/emacsd
        sln ~/seartipy/emacses/emacsd ~/.emacs.d
    fi

    seartipy_upgrade_mean
    has_cmd sbt && cd ~/programs/scala/scala-starter 2> /dev/null && sbt console -batch
    has_cmd lein && cd ~/programs/clojure/clojure-starter 2> /dev/null && lein
    cd && has_cmd npm && npm update -g
    cd && has_cmd cabal && cabal update
    cd && has_cmd stack && stack update
    cd && has_cmd stack && stack update
    cd && has_cmd pyenv && pyenv rehash
}

#
# ctrl alt

seartipy_ctrl_alt_set() {
    is_linux || return 1
    has_cmd gnome-session && gsettings set org.gnome.desktop.input-sources xkb-options "['caps:ctrl_modifier', 'ctrl:lctrl_meta']"
    has_cmd mate-session && dconf write /org/mate/desktop/peripherals/keyboard/kbd/options "['ctrl\tctrl:lctrl_meta', 'caps\tcaps:ctrl_modifier']"
}

seartipy_ctrl_alt_reset() {
    is_linux || return 1
    has_cmd gnome-session && gsettings set org.gnome.desktop.input-sources xkb-options "@as []"
    has_cmd mate-session && dconf write /org/mate/desktop/peripherals/keyboard/kbd/options '@as []'
}

seartipy_ctrl_caps_set() {
    is_linux || return 1
    has_cmd gnome-session && gsettings set org.gnome.desktop.input-sources xkb-options "['ctrl:nocaps']"
    has_cmd mate-session && dconf write /org/mate/desktop/peripherals/keyboard/kbd/options "['ctrl\tctrl:nocaps', 'caps\tcaps:none']"
}

seartipy_ctrl_caps_reset() {
    seartipy_ctrl_alt_reset
}

#
# aliases

alias cas=seartipy_ctrl_alt_set
alias car=seartipy_ctrl_alt_reset
alias ccs=seartipy_ctrl_caps_set
alias ccr=seartipy_ctrl_caps_reset

alias sse="seartipy_emacs_default spacemacs"
alias sle="seartipy_emacs_default lean-emacs"
alias she="seartipy_emacs_default emacsd"

alias es="seartipy_spacemacs"
alias el="seartipy_lean"
alias eh="seartipy_emacsd"

alias ec="emacsclient -c -n"

alias en="emacs -nw"
alias et="emacsclient -t"

alias xen="TERM=xterm-256color emacs -nw"
alias xet="TERM=xterm-256color emacsclient -t"

alias ten= "TERM=xterm-24bits emacs -nw"
alias tet="TERM=xterm-24bits emacsclient -t"

alias emacs-kill="seartipy_kill_emacs"

alias upa=seartipy_upgrade_all
alias upm=seartipy_upgrade_mean
alias ups=upgrade
alias upe=seartipy_upgrade_emacs
alias upd=seartipy_upgrade_dotfiles

alias sfl=seartipy_fix_links

alias yi="yarn install"
alias yid="yarn install -D"
alias yrmn="trash node_modules && trash yarn.lock"
alias ys="yarn start"
alias yt="yarn test"
alias ytw="yarn test:watch"
alias yb="yarn build"
alias yl="yarn lint"
alias yv="yarn validate"
alias ycl="yarn clean"
alias yty="yarn types"
alias ytyw="yarn types:watch"

alias ylf="yarn lint:fix"
alias m="mkdir -p"

alias a='fasd -a'        # any
alias s='fasd -si'       # show / search / select
alias d='fasd -d'        # directory
alias f='fasd -f'        # file
alias sd='fasd -sid'     # interactive directory selection
alias sf='fasd -sif'     # interactive file selection
alias z='fasd_cd -d'     # cd, same functionality as j in autojump
alias zz='fasd_cd -d -i' # cd with interactive selection

alias c="fasd -d -e code"
alias c.="code ."

alias git-unstage="git reset HEAD"
alias git-discard="git checkout --"
alias gst="git status"
alias gsu="git status -u"
alias tsgfm="git stash && ((git pull --rebase || git pull); git stash pop)"

alias gun="git-unstage"
alias gur="git-discard"
alias gcm="git commit -m"
alias gcne="git commit --no-edit"
alias gca="git commit --amend"
alias gcan="git commit --amend --no-edit"

alias jf="code ~/programs/web/devfractal" # use j maybe?
alias jd="code ~/seartpy/dotfiles" # use j maybe?

if is_ubuntu; then
    alias si="sudo apt-get install -y"
    alias ss="apt-cache search"
    alias sr="sudo apt-get purge"
fi

if is_mac; then
    alias si="brew install"
    alias ss="brew search"
    alias sr="brew uninstall"
fi

#

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
# export SDKMAN_DIR="~/.sdkman"
# [[ -s "~/.sdkman/bin/sdkman-init.sh" ]] && source "~/.sdkman/bin/sdkman-init.sh"
